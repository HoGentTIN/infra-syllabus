{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Studiewijzer De inhoud van deze studiewijzer geldt zowel voor de reguliere studenten als de studenten afstandsleren (TILE) . Waar nodig wordt duidelijk onderscheid gemaakt tussen zaken die enkel voor \u00e9\u00e9n van deze twee groepen gelden. Wat betreft praktische afspraken, regelingen, verwachtingen, enz. in verband met deze cursus zijn de enige geldige bronnen van informatie: De studiefichefiche van dit opleidingsonderdeel, te bekijken via de Chamilo- cursus of https://hogent.be/studiefiches/ ; Deze studiewijzer; Documenten op Chamilo; Aankondigingen op Chamilo\u2014deze worden ook telkens per e-mail naar de betrokken studenten gestuurd; Het Onderwijs- en Examenreglement (OER) , incl. departementale aanvullingen (DOER). Jullie zijn zelf verantwoordelijk voor het opvolgen en lezen van alle aankondigingen. Studenten worden geacht hun opleidingsgerelateerde e-mails regelmatig op te volgen. Indien er ergens twijfel over bestaat, of er is iets niet duidelijk, neem dan zo snel mogelijk contact op met je lector. De aangewezen manieren worden opgesomd in Sectie studiebegeleiding en planning . De ervaring leert dat de onderlinge communicatie tussen studenten via Discord of Facebook leidt tot verwarring, foute informatie en overbodige discussie. Gebruik dus a.u.b. de offici\u00eble kanalen zodat we tot een open en correcte communicatie rond deze cursus kunnen komen. Doel en plaats van de cursus in het curriculum Deze cursus biedt een inleiding in het vakgebied Infrastructure Automation, d.w.z. het geautomatiseerd opzetten en in productie brengen van reproduceerbare en schaalbare netwerkdiensten. Klassiek werden (en worden) servers stap voor stap handmatig ge\u00efnstalleerd en geconfigureerd. Hopelijk houdt de systeembeheerder daarbij een gedetailleerde procedurehandleiding bij zodat dit werk kan gereproduceerd worden, bijvoorbeeld als de servercapaciteit moet uitgebreid worden, als er moet gemigreerd worden naar een nieuwere versie van het besturingssysteem, enz. Wanneer je als systeembeheerder een serverpark van tientallen, honderden of zelfs duizenden machines (hetzij fysiek, hetzij virtueel) moet beheren, dan is het manueel opzetten, of zelfs scripten van de configuratie niet meer voldoende. In dit soort omgevingen wordt steevast gebruik gemaakt van Configuration Management Systems om de taaklast beheersbaar te houden. In deze cursus maken we gebruik van het Configuration Management System Ansible , omdat dit een voor beginners toegankelijk systeem is dat qua filosofie en logica aansluit bij klassieke shell scripts. In het werkveld is de kans groot dat je ook met andere Configuration Management Systems in aanraking komt, bijvoorbeeld Puppet of Chef . Andere termen die gebruikt worden in plaats van Infrastructure Automation: Infrastructure as Code: de sleutel tot automatiseren bestaat er in om de gewenste toestand van een systeem precies te beschrijven in een daarvoor ontworpen taal. Puppet heeft hiervoor bijvoorbeeld een Domain Specific Language (DSL) ontwikkeld, terwijl Ansible gebruik maakt van een bestaande taal voor het beschrijven van gestructureerde data, nl. YAML . Deze beschrijving is uitvoerbaar (executable), d.w.z. een configuration management system kan aan de hand van deze beschrijving een systeem naar de gewenste toestand brengen. Je kan dit beschouwen als (bron)code, maar in plaats van software bouw je er infrastructuur mee. Dit brengt als bijkomend voordeel met zich mee dat allerlei best-practices uit software-ontwikkeling op die manier ook kunnen toegepast worden in systeembeheer: code bijhouden in een versiebeheersysteem, codeerstijl toepassen, geautomatiseerd testen, geautomatiseerd uitrollen van infrastructuur (CI/CD), enz. GitOps: tegenwoordig hou je broncode zo goed als altijd bij in een versiebeheersysteem. Git is in dit domein marktleider geworden. Daarom wordt het bijhouden van infrastructuur-code in Git soms ook GitOps genoemd. De term Infrastructure Automation wordt vaak verward met DevOps . DevOps is de naam van de professionele beweging (ontstaan in 2009 in Gent ) die software-ontwikkelaars (DEVelopers) en systeembeheerders (OPerationS) nauwer wil laten samenwerken met als doel kwalitatievere software. In een klassieke IT-organisatiestructuur zijn software-ontwikkeling en infrastructuur (= systeem- en netwerkbeheer) aparte afdelingen met hun eigen hi\u00ebrarchie, manier van budgetteren, operationele doelstellingen, enz. Dat leidt tot allerlei kwaliteitsproblemen. Door de bedrijfsstructuur te organiseren rond interdisciplinaire product-teams, komt men tot een betere samenwerking, gedeelde verantwoordelijkheid en gemeenschappelijke doelstellingen. DevOps is dus een term die eerder te maken heeft met bedrijfscultuur en -organisatie dan met technische onderwerpen. Het is wel zo dat een verregaande automatisering typisch is voor DevOps-teams, en wellicht is de verwarring zo ontstaan. Binnen het curriculum situeert deze cursus zich in het keuzepakket System and Network Administrator van het derde modeltraject. Qua inhoud gaat het verder op de olods Linux en System Engineering Project uit het 2e modeltraject. De kennis en vaardigheden die je in Infrastructure Automation opdoet, kan je ook toepassen in DevOps project: Operations . Leerdoelen en competenties Kan het opzetten van netwerkservices automatiseren met een configuration management system Kan reproduceerbare virtuele omgevingen installeren en configureren (Infrastructure as Code) met geschikte tools voor de automatisering van de gehele levenscyclus van een VM (bv. Packer, Vagrant, Terraform, Docker Compose, ...) Kan orchestratiesysteem voor containervirtualisatie configureren en beheren (bv. Kubernetes) Kan de werking van een it-systeem opvolgen met een logging- of monitoringsysteem om defecten te detecteren en de oorzaak op te sporen Kan een package-managementsysteem of repository opzetten en onderhouden en daarbij de problematiek van afhankelijkheden (dependencies) onder controle houden Leerinhoud Opmerking In academiejaar 2021-2022 hebben studenten die dit olod volgen het olod Linux , dat als begincompetentie geldt, nog niet gekregen. Dit academiejaar wordt dan ook een overgangsjaar waar de belangrijkste onderwerpen die in Linux gegeven zullen worden toch in dit vak aan bod zullen komen. Inleiding, opzetten werkomgeving Module 1: containervirtualisatie Docker sandbox-omgeving opzetten Module 2: continuous integration/delivery Een CI/CD pipeline opzetten met Jenkins Package management Module 3: bottom-up troubleshooting (overgangsjaar) Op een systematische en grondige manier configuratiefouten opsporen en oplossen Module 4: configuration management LAMP-stack geautomatiseerd opzetten met Ansible Minimaal functioneel netwerk opzetten: router, DNS, DHCP (overgangsjaar) Leermateriaal Het leermateriaal voor deze cursus bestaat uit: De informatie op Chamilo Online cursusmateriaal: Deze syllabus met studiewijzer De slides bij de les Vagrant demo-omgeving Opgave van de labo-oefeningen Handleidingen van de gebruikte software (online te raadplegen): Ansible: https://docs.ansible.com/ cAdvisor: https://github.com/google/cadvisor Docker: https://docs.docker.com/ ElasticSearch, Kibana: https://www.elastic.co/guide/index.html Fluentd: https://docs.fluentd.org/ Grafana: https://grafana.com/docs/ Prometheus: https://prometheus.io/docs/ enz. Aanbevolen boeken Er is geen verplicht handboek, maar verderop geven we wel enkele aanbevolen titels op voor de ge\u00efnteresseerde student. De cursus kan perfect gevolgd worden zonder toegang te hebben tot deze boeken, maar kunnen wel interessant zijn om de achtergrondkennis en inzichten in de leerstof te verhogen, of als naslagwerk wanneer je deze tools voor je job nodig hebt. Geerling, J. (2020) Ansible for DevOps: Server and configuration management for humans. LeanPub. https://leanpub.com/ansible-for-devops McKendrick, R. & Gallagher, S (2020) Mastering Docker. 4th Edition. Packt Publishing. https://www.packtpub.com/product/mastering-docker-fourth-edition/9781839216572 Sesto, V. (2021) Practical Ansible: Configuration Management from Start to Finish. Apress. https://link.springer.com/book/10.1007%2F978-1-4842-6485-0 Opmerking: In deze lijst staat een boek met een verwijzing naar Springer Link. Deze kan je dankzij een abonnement van de HOGENT-bib gratis downloaden als PDF of Epub. Het volstaat om de link aan te klikken vanop de hogeschoolcampus of na het aanzetten van VPN. Er is verder geen authenticatie nodig, je kan het e-boek meteen downloaden. Software We gebruiken een heleboel softwarepakketten in dit olod, maar die hoef je niet noodzakelijk allemaal meteen te installeren. Het grootste deel van de installaties gebeurt immers binnen een (reproduceerbare) virtuele machine. Volgende software heb je wel nodig: Een goede teksteditor. Visual Studio Code is aanbevolen, bij voorkeur met volgende plugins: GitLens - Git supercharged (Eric Amodio) Markdown All in One (Yu Zhang) markdownlint (David Anson) Remote - Containers (Microsoft) Remote - SSH (Microsoft) Remote - SSH: Editing configuration Files (Microsoft) ShellCheck (Timon Wong) VirtualBox , de laatste versie bij aanvang van het semester (incl. het Extension Pack) Vagrant , een command-line tool voor het geautomatiseerd opzetten van reproduceerbare virtuele omgevingen in VirtualBox (of een andere hypervisor. Git client (incl. Git Bash onder Windows) Linux- en Mac-gebruikers installeren ook Ansible . Dit is niet ondersteund op Windows, maar daarvoor is er een workaround voorzien. De eenvoudigste manier om de nodige software te installeren is via een package manager . Bijvoorbeeld Chocolatey voor Windows (in een Administrator-terminal): PS> choco install git PS> choco install vscode PS> choco install virtualbox PS> choco install vagrant of Homebrew voor Mac: $ brew install bash $ brew install git $ brew cask install visual-studio-code $ brew cask install virtualbox $ brew cask install virtualbox-extension-pack $ brew cask install vagrant $ brew install ansible Linux-gebruikers zijn deze manier van werken gewend en gebruiken de package manager van hun distributie, bv. apt (Debian, Ubuntu), dnf (Fedora en RHEL-familie), pacman (Arch Linux), enz. Werkvormen In dit opleidingsonderdeel wordt hoofdzakelijk gewerkt aan de hand van labo-opdrachten. De ondersteunende studiematerialen en deze syllabus moeten je in staat stellen die met succes af te werken. Reguliere studenten Tijdens de reguliere lessen geeft de lector klassikaal instructie, waarna studenten zelfstandig en op eigen tempo werken aan de labo-opdrachten. Studenten hebben op regelmatige basis een voortgangsgesprek met de lector en kunnen dan uitleg vragen bij specifieke problemen. Als de contactmomenten omwille van corona-maatregelen niet op de campus kunnen doorgaan, dan gebeuren zowel de klassikale instructie als individuele opvogingsgesprekken via Microsoft Teams (videoconferencing). De lector zal elke wijziging in deze regeling via Chamilo aankondigen, maar je mag in principe uitgaan van volgende regeling: Code groen: contactmomenten gaan door op de campus Code geel/oranje/rood: contactmomenten gaan door via Teams Afstandsleren (TILE) Studenten afstandsleren verwerken de leerstof op eigen tempo, aan de hand van de aangeboden studiematerialen, en voeren de labo-opdrachten uit. Ze kunnen op de contactmomenten voor studenten afstandsleren een afspraak maken met de lector voor een individueel voortgangsgesprek en opvolging (zie Studiebegeleiding en planning ). Werk- en leeraanwijzingen Het werken met labo-opdrachten vergt een zekere mate van zelfstandigheid van jou als student, maar dat is precies ook een attitude die verwacht wordt van een systeembeheerder. Je neemt dus zelf initiatief om de nodige kennis te vergaren en zoekt naar oplossingen voor de problemen die je ongetwijfeld zal tegenkomen. Help elkaar daarin: samenwerken en kennis delen wordt van harte aangemoedigd. De lector is uiteraard beschikbaar om je bij te staan als je vast komt te zitten en kan je tips geven of verwijzen naar geschikte aanvullende studiematerialen. Reguliere studenten moeten in de loop van het semester minstens drie keer persoonlijk bij de lector langs komen om deelresultaten te tonen. Kom zeker langs als je ergens vast zit, zodat de lector je terug op weg kan helpen! Studiebegeleiding en planning Studiebegeleiding reguliere studenten Studenten stellen hun vragen over de cursus bij voorkeur tijdens de voorziene contactmomenten. Buiten de contactmomenten kunnen studenten vragen stellen via Teams, meer bepaald het chat-kanaal van het Team voor dit vak. Op Chamilo vind je een link naar het juiste kanaal. Studenten worden aangemoedigd om daar ook vragen van anderen te beantwoorden. De lector rechtstreeks contacteren via e-mail of Teams chat doe je enkel als je een persoonlijke vraag hebt. Alle vragen over de leerstof gaan via het Teams-kanaal, zoals hierboven beschreven, zodat we jullie vragen hoogstens \u00e9\u00e9n keer moeten beantwoorden en iedereen meteen het antwoord kan zien. Studiebegeleiding Afstandsleren (TILE) Studenten afstandsleren kunnen vragen stellen tijdens de contactmomenten voor TILE. Als deze contactmomenten niet op de campus doorgaan, gebeurt dit via Teams (videoconferencing). De precieze regeling wordt vooraf via Chamilo aangekondigd. Buiten de contactmomenten kunnen studenten vragen stellen via Teams, meer bepaald het chat-kanaal van het Team voor dit vak. Op Chamilo vind je een link naar het juiste kanaal. Studenten worden aangemoedigd om daar ook vragen van anderen te beantwoorden. De lector rechtstreeks contacteren via Teams chat of e-mail doe je enkel als je een persoonlijke vraag hebt. Alle vragen over de leerstof gaan via het Teams-kanaal, zoals hierboven beschreven, zodat we jullie vragen hoogstens \u00e9\u00e9n keer moeten beantwoorden en iedereen meteen het antwoord kan zien. Studiebegeleiding 2e examenkans Studenten die doorverwezen worden naar de 2e examenkans, worden in principe niet begeleid en voeren de labo-opdrachten uit op eigen kracht. De lector zal je tijdens de feedback meedelen of en hoe je eventueel contact kan opnemen tijdens het zomerreces. Weekplanning Volgende weekplanning is enkel bij benadering! Wanneer er lessen wegvallen, bijvoorbeeld door verlofdagen, kunnen er nog verschuivingen gebeuren. In de weken waar een specifiek onderwerp opgegeven staat, is er klassikale instructie voorzien over dat onderwerp. Tijdens de weken waar niets staat, is er ruimte voor het werken aan de labo-opdrachten en individuele opvolging Er zijn twee gequoteerde troubleshooting-labo's gepland met (voor reguliere studenten) verplichte aanwezigheid. Bij ziekte volg je de normale procedure voor het wettigen van je afwezigheid. Contacteer ook zo snel mogelijk je lector voor een inhaalopdracht. Bij het begin van een troubleshooting-opdracht krijg je een opstelling voorgeschoteld (typisch een virtuele machine) met configuratiefouten. Het is jouw taak die zo snel mogelijk systematisch op te sporen en op te lossen volgens de methode die je aangeleerd krijgt. Over dit proces en je resultaten schrijf je een laboverslag dat je indient op Chamilo. Studenten afstandsleren kunnen de troubleshooting-labo's thuis uitvoeren. Spreek met de lector in de loop van de voorziene weken een moment af waarop je tijd hebt om hier aan te werken. Op het afgesproken tijdstip krijg je een downloadlink naar de opgave en dien je v\u00f3\u00f3r de afgesproken deadline (in principe 4 uur na ontvangst van de opgave) je verslag in op Chamilo. Lesweek Onderwerp 1 Inleiding, praktische afspraken Installatie software M1. Containervirtualisatie 2 3 M2. Continuous Integration/Delivery 4 M3. Bottom-up Troubleshooting 5 Troubleshooting-labo 1 6 7 M4. Configuration Management 8 9 10 11 12 Troubleshooting-labo 2 13 Inhaalsessie (indien ingericht door je lector) Evaluatie De evaluatie van dit opleidingsonderdeel gebeurt volledig via permanente evaluatie. Meer bepaald word je beoordeeld op de manier waarop je de opgegeven labo-opdrachten hebt uitgevoerd. Troubleshooting wordt ge\u00ebvalueerd op basis van vaardigheidstests, de andere taken op basis van een portfolio dat je samenstelt tijdens de loop van het semester en dat je op een evaluatiemoment tijdens de examenperiode komt verdedigen. Dat portfolio bestaat concreet uit volgende elementen: De broncode, door elke student bijgehouden in een toegewezen Git repository Gedetailleerde labo-verslagen, eveneens bijgehouden in Git of desgevallend ingediend via Chamilo Demonstratie van deelresultaten aan de lector tijdens het semester Demonstratie van het eindresultaat aan de lector tijdens de examenperiode De toekenning van het examencijfer gebeurt op basis van \u201crubrics\u201d die beschreven worden in de evaluatiekaart die gepubliceerd wordt op Chamilo. In een tabel worden een aantal criteria opgesomd, waar je aan moet voldoen. Je kan \u201cvoldoen\u201d op verschillende niveaus, meer bepaald \u201cbekwaam\u201d, \u201cgevorderd\u201d, \u201cdeskundig\u201d, of in het slechtste geval \u201cnog niet bekwaam\u201d. In de evaluatiekaart wordt beschreven wat je precies moet doen om elk niveau te behalen. Om te slagen voor dit vak moet je aantonen dat je voor alle technische criteria minstens \u201cbekwaam\u201d bent. Met andere woorden, zelfs als je voor slechts \u00e9\u00e9n criterium \u201cnog niet bekwaam\u201d bevonden wordt, kan je niet slagen, hoe goed je ook de andere modules hebt afgewerkt. De niet-technische criteria (bv. rapportering) kunnen het examencijfer afhankelijk van het behaalde niveau nog positief of negatief be\u00efnvloeden (en eventueel zelfs nog onder 10/20 doen zakken!). Merk op dat je zowel een werkend product moet opleveren (= broncode) als de verslagen indienen \u00e9n demo\u2019s geven. Als \u00e9\u00e9n van de deliverables ontbreekt, wordt de opdracht beschouwd als niet gerealiseerd. Tussentijdse deadlines Studenten moeten minstens drie keer tijdens het semester deelresulaten opleveren en persoonlijk demonstreren aan de lector. Deze periodes worden beschouwd als tussentijdse deadlines, waarbij de afspraken gelden die in het Onderwijs- en Examenreglement (OER) en de Departementale Aanvullingen daarop (DOER) gespecifieerd zijn. Niet tijdig deelresultaten opleveren wordt dus beschouwd als het niet respecteren van tussentijdse deadlines en wordt als dusdanig gesanctioneerd. Een student krijgt dan voor de labo-opdrachten die niet tijdig opgeleverd werden de beoordeling \u201cNog niet bekwaam\u201d en kan bijgevolg ook niet slagen. Specifieke afspraken reguliere studenten Reguliere studenten gaan tijdens de contactmomenten regelmatig langs bij de lector voor individuele opvolging en voor het opleveren van deelresultaten. Ook als je weinig tot niets gerealiseerd hebt, kom je langs. Dat is immers een teken dat je ergens vast zit, en de lector kan je dan opnieuw op weg helpen. Specifieke afspraken afstandsleren Studenten afstandsleren kunnen op verschillende manieren deelresultaten opleveren: aan de hand van een screencast (bv. publiceren via Youtube of Panopto, link doorsturen naar de lector), via videoconferencing (Microsoft Teams, na afspraak), tijdens de contactmomenten voor TILE-studenten, als de lector daar aanwezig is (en enkel na afspraak) Tweede examenkans Wie niet slaagt, krijgt een tweede examenkans in de vorm van een individuele opdracht. De precieze opdracht hangt af van je evaluatie en bestaat concreet uit: \u00e9\u00e9n labo-opdracht die voor iedereen hetzelfde is (onderwerp: Kubernetes) labo's afwerken van de modules waar je je bekwaamheid nog niet hebt aangetoond. Deze individuele opdracht wordt meteen vastgelegd en besproken op het finale evaluatiemoment. Als je nog geen individuele opdracht gekregen hebt op het evaluatiemoment (bijvoorbeeld omdat je afwezig was), dan kom je naar de feedback. Studenten afstandsleren kunnen dit ook per e-mail regelen of een afspraak maken om dit te bespreken via Teams, mits dit gebeurt v\u00f3\u00f3r aanvang van het intersemestrieel reces. Wie na afloop van de feedback nog geen afspraak gemaakt heeft voor een individuele opdracht, geeft daarmee te kennen niet te willen deelnemen aan de 2e examenkans. Licentie-informatie Deze syllabus is samengesteld door Bert Van Vreckem . De tekst van de syllabus en de slides vallen onder de Creative Commons Naamsvermelding-GelijkDelen 4.0 Internationale Publieke Licentie .","title":"Studiewijzer"},{"location":"#studiewijzer","text":"De inhoud van deze studiewijzer geldt zowel voor de reguliere studenten als de studenten afstandsleren (TILE) . Waar nodig wordt duidelijk onderscheid gemaakt tussen zaken die enkel voor \u00e9\u00e9n van deze twee groepen gelden. Wat betreft praktische afspraken, regelingen, verwachtingen, enz. in verband met deze cursus zijn de enige geldige bronnen van informatie: De studiefichefiche van dit opleidingsonderdeel, te bekijken via de Chamilo- cursus of https://hogent.be/studiefiches/ ; Deze studiewijzer; Documenten op Chamilo; Aankondigingen op Chamilo\u2014deze worden ook telkens per e-mail naar de betrokken studenten gestuurd; Het Onderwijs- en Examenreglement (OER) , incl. departementale aanvullingen (DOER). Jullie zijn zelf verantwoordelijk voor het opvolgen en lezen van alle aankondigingen. Studenten worden geacht hun opleidingsgerelateerde e-mails regelmatig op te volgen. Indien er ergens twijfel over bestaat, of er is iets niet duidelijk, neem dan zo snel mogelijk contact op met je lector. De aangewezen manieren worden opgesomd in Sectie studiebegeleiding en planning . De ervaring leert dat de onderlinge communicatie tussen studenten via Discord of Facebook leidt tot verwarring, foute informatie en overbodige discussie. Gebruik dus a.u.b. de offici\u00eble kanalen zodat we tot een open en correcte communicatie rond deze cursus kunnen komen.","title":"Studiewijzer"},{"location":"#doel-en-plaats-van-de-cursus-in-het-curriculum","text":"Deze cursus biedt een inleiding in het vakgebied Infrastructure Automation, d.w.z. het geautomatiseerd opzetten en in productie brengen van reproduceerbare en schaalbare netwerkdiensten. Klassiek werden (en worden) servers stap voor stap handmatig ge\u00efnstalleerd en geconfigureerd. Hopelijk houdt de systeembeheerder daarbij een gedetailleerde procedurehandleiding bij zodat dit werk kan gereproduceerd worden, bijvoorbeeld als de servercapaciteit moet uitgebreid worden, als er moet gemigreerd worden naar een nieuwere versie van het besturingssysteem, enz. Wanneer je als systeembeheerder een serverpark van tientallen, honderden of zelfs duizenden machines (hetzij fysiek, hetzij virtueel) moet beheren, dan is het manueel opzetten, of zelfs scripten van de configuratie niet meer voldoende. In dit soort omgevingen wordt steevast gebruik gemaakt van Configuration Management Systems om de taaklast beheersbaar te houden. In deze cursus maken we gebruik van het Configuration Management System Ansible , omdat dit een voor beginners toegankelijk systeem is dat qua filosofie en logica aansluit bij klassieke shell scripts. In het werkveld is de kans groot dat je ook met andere Configuration Management Systems in aanraking komt, bijvoorbeeld Puppet of Chef . Andere termen die gebruikt worden in plaats van Infrastructure Automation: Infrastructure as Code: de sleutel tot automatiseren bestaat er in om de gewenste toestand van een systeem precies te beschrijven in een daarvoor ontworpen taal. Puppet heeft hiervoor bijvoorbeeld een Domain Specific Language (DSL) ontwikkeld, terwijl Ansible gebruik maakt van een bestaande taal voor het beschrijven van gestructureerde data, nl. YAML . Deze beschrijving is uitvoerbaar (executable), d.w.z. een configuration management system kan aan de hand van deze beschrijving een systeem naar de gewenste toestand brengen. Je kan dit beschouwen als (bron)code, maar in plaats van software bouw je er infrastructuur mee. Dit brengt als bijkomend voordeel met zich mee dat allerlei best-practices uit software-ontwikkeling op die manier ook kunnen toegepast worden in systeembeheer: code bijhouden in een versiebeheersysteem, codeerstijl toepassen, geautomatiseerd testen, geautomatiseerd uitrollen van infrastructuur (CI/CD), enz. GitOps: tegenwoordig hou je broncode zo goed als altijd bij in een versiebeheersysteem. Git is in dit domein marktleider geworden. Daarom wordt het bijhouden van infrastructuur-code in Git soms ook GitOps genoemd. De term Infrastructure Automation wordt vaak verward met DevOps . DevOps is de naam van de professionele beweging (ontstaan in 2009 in Gent ) die software-ontwikkelaars (DEVelopers) en systeembeheerders (OPerationS) nauwer wil laten samenwerken met als doel kwalitatievere software. In een klassieke IT-organisatiestructuur zijn software-ontwikkeling en infrastructuur (= systeem- en netwerkbeheer) aparte afdelingen met hun eigen hi\u00ebrarchie, manier van budgetteren, operationele doelstellingen, enz. Dat leidt tot allerlei kwaliteitsproblemen. Door de bedrijfsstructuur te organiseren rond interdisciplinaire product-teams, komt men tot een betere samenwerking, gedeelde verantwoordelijkheid en gemeenschappelijke doelstellingen. DevOps is dus een term die eerder te maken heeft met bedrijfscultuur en -organisatie dan met technische onderwerpen. Het is wel zo dat een verregaande automatisering typisch is voor DevOps-teams, en wellicht is de verwarring zo ontstaan. Binnen het curriculum situeert deze cursus zich in het keuzepakket System and Network Administrator van het derde modeltraject. Qua inhoud gaat het verder op de olods Linux en System Engineering Project uit het 2e modeltraject. De kennis en vaardigheden die je in Infrastructure Automation opdoet, kan je ook toepassen in DevOps project: Operations .","title":"Doel en plaats van de cursus in het curriculum"},{"location":"#leerdoelen-en-competenties","text":"Kan het opzetten van netwerkservices automatiseren met een configuration management system Kan reproduceerbare virtuele omgevingen installeren en configureren (Infrastructure as Code) met geschikte tools voor de automatisering van de gehele levenscyclus van een VM (bv. Packer, Vagrant, Terraform, Docker Compose, ...) Kan orchestratiesysteem voor containervirtualisatie configureren en beheren (bv. Kubernetes) Kan de werking van een it-systeem opvolgen met een logging- of monitoringsysteem om defecten te detecteren en de oorzaak op te sporen Kan een package-managementsysteem of repository opzetten en onderhouden en daarbij de problematiek van afhankelijkheden (dependencies) onder controle houden","title":"Leerdoelen en competenties"},{"location":"#leerinhoud","text":"Opmerking In academiejaar 2021-2022 hebben studenten die dit olod volgen het olod Linux , dat als begincompetentie geldt, nog niet gekregen. Dit academiejaar wordt dan ook een overgangsjaar waar de belangrijkste onderwerpen die in Linux gegeven zullen worden toch in dit vak aan bod zullen komen. Inleiding, opzetten werkomgeving Module 1: containervirtualisatie Docker sandbox-omgeving opzetten Module 2: continuous integration/delivery Een CI/CD pipeline opzetten met Jenkins Package management Module 3: bottom-up troubleshooting (overgangsjaar) Op een systematische en grondige manier configuratiefouten opsporen en oplossen Module 4: configuration management LAMP-stack geautomatiseerd opzetten met Ansible Minimaal functioneel netwerk opzetten: router, DNS, DHCP (overgangsjaar)","title":"Leerinhoud"},{"location":"#leermateriaal","text":"Het leermateriaal voor deze cursus bestaat uit: De informatie op Chamilo Online cursusmateriaal: Deze syllabus met studiewijzer De slides bij de les Vagrant demo-omgeving Opgave van de labo-oefeningen Handleidingen van de gebruikte software (online te raadplegen): Ansible: https://docs.ansible.com/ cAdvisor: https://github.com/google/cadvisor Docker: https://docs.docker.com/ ElasticSearch, Kibana: https://www.elastic.co/guide/index.html Fluentd: https://docs.fluentd.org/ Grafana: https://grafana.com/docs/ Prometheus: https://prometheus.io/docs/ enz.","title":"Leermateriaal"},{"location":"#aanbevolen-boeken","text":"Er is geen verplicht handboek, maar verderop geven we wel enkele aanbevolen titels op voor de ge\u00efnteresseerde student. De cursus kan perfect gevolgd worden zonder toegang te hebben tot deze boeken, maar kunnen wel interessant zijn om de achtergrondkennis en inzichten in de leerstof te verhogen, of als naslagwerk wanneer je deze tools voor je job nodig hebt. Geerling, J. (2020) Ansible for DevOps: Server and configuration management for humans. LeanPub. https://leanpub.com/ansible-for-devops McKendrick, R. & Gallagher, S (2020) Mastering Docker. 4th Edition. Packt Publishing. https://www.packtpub.com/product/mastering-docker-fourth-edition/9781839216572 Sesto, V. (2021) Practical Ansible: Configuration Management from Start to Finish. Apress. https://link.springer.com/book/10.1007%2F978-1-4842-6485-0 Opmerking: In deze lijst staat een boek met een verwijzing naar Springer Link. Deze kan je dankzij een abonnement van de HOGENT-bib gratis downloaden als PDF of Epub. Het volstaat om de link aan te klikken vanop de hogeschoolcampus of na het aanzetten van VPN. Er is verder geen authenticatie nodig, je kan het e-boek meteen downloaden.","title":"Aanbevolen boeken"},{"location":"#software","text":"We gebruiken een heleboel softwarepakketten in dit olod, maar die hoef je niet noodzakelijk allemaal meteen te installeren. Het grootste deel van de installaties gebeurt immers binnen een (reproduceerbare) virtuele machine. Volgende software heb je wel nodig: Een goede teksteditor. Visual Studio Code is aanbevolen, bij voorkeur met volgende plugins: GitLens - Git supercharged (Eric Amodio) Markdown All in One (Yu Zhang) markdownlint (David Anson) Remote - Containers (Microsoft) Remote - SSH (Microsoft) Remote - SSH: Editing configuration Files (Microsoft) ShellCheck (Timon Wong) VirtualBox , de laatste versie bij aanvang van het semester (incl. het Extension Pack) Vagrant , een command-line tool voor het geautomatiseerd opzetten van reproduceerbare virtuele omgevingen in VirtualBox (of een andere hypervisor. Git client (incl. Git Bash onder Windows) Linux- en Mac-gebruikers installeren ook Ansible . Dit is niet ondersteund op Windows, maar daarvoor is er een workaround voorzien. De eenvoudigste manier om de nodige software te installeren is via een package manager . Bijvoorbeeld Chocolatey voor Windows (in een Administrator-terminal): PS> choco install git PS> choco install vscode PS> choco install virtualbox PS> choco install vagrant of Homebrew voor Mac: $ brew install bash $ brew install git $ brew cask install visual-studio-code $ brew cask install virtualbox $ brew cask install virtualbox-extension-pack $ brew cask install vagrant $ brew install ansible Linux-gebruikers zijn deze manier van werken gewend en gebruiken de package manager van hun distributie, bv. apt (Debian, Ubuntu), dnf (Fedora en RHEL-familie), pacman (Arch Linux), enz.","title":"Software"},{"location":"#werkvormen","text":"In dit opleidingsonderdeel wordt hoofdzakelijk gewerkt aan de hand van labo-opdrachten. De ondersteunende studiematerialen en deze syllabus moeten je in staat stellen die met succes af te werken.","title":"Werkvormen"},{"location":"#reguliere-studenten","text":"Tijdens de reguliere lessen geeft de lector klassikaal instructie, waarna studenten zelfstandig en op eigen tempo werken aan de labo-opdrachten. Studenten hebben op regelmatige basis een voortgangsgesprek met de lector en kunnen dan uitleg vragen bij specifieke problemen. Als de contactmomenten omwille van corona-maatregelen niet op de campus kunnen doorgaan, dan gebeuren zowel de klassikale instructie als individuele opvogingsgesprekken via Microsoft Teams (videoconferencing). De lector zal elke wijziging in deze regeling via Chamilo aankondigen, maar je mag in principe uitgaan van volgende regeling: Code groen: contactmomenten gaan door op de campus Code geel/oranje/rood: contactmomenten gaan door via Teams","title":"Reguliere studenten"},{"location":"#afstandsleren-tile","text":"Studenten afstandsleren verwerken de leerstof op eigen tempo, aan de hand van de aangeboden studiematerialen, en voeren de labo-opdrachten uit. Ze kunnen op de contactmomenten voor studenten afstandsleren een afspraak maken met de lector voor een individueel voortgangsgesprek en opvolging (zie Studiebegeleiding en planning ).","title":"Afstandsleren (TILE)"},{"location":"#werk-en-leeraanwijzingen","text":"Het werken met labo-opdrachten vergt een zekere mate van zelfstandigheid van jou als student, maar dat is precies ook een attitude die verwacht wordt van een systeembeheerder. Je neemt dus zelf initiatief om de nodige kennis te vergaren en zoekt naar oplossingen voor de problemen die je ongetwijfeld zal tegenkomen. Help elkaar daarin: samenwerken en kennis delen wordt van harte aangemoedigd. De lector is uiteraard beschikbaar om je bij te staan als je vast komt te zitten en kan je tips geven of verwijzen naar geschikte aanvullende studiematerialen. Reguliere studenten moeten in de loop van het semester minstens drie keer persoonlijk bij de lector langs komen om deelresultaten te tonen. Kom zeker langs als je ergens vast zit, zodat de lector je terug op weg kan helpen!","title":"Werk- en leeraanwijzingen"},{"location":"#studiebegeleiding-en-planning","text":"","title":"Studiebegeleiding en planning"},{"location":"#studiebegeleiding-reguliere-studenten","text":"Studenten stellen hun vragen over de cursus bij voorkeur tijdens de voorziene contactmomenten. Buiten de contactmomenten kunnen studenten vragen stellen via Teams, meer bepaald het chat-kanaal van het Team voor dit vak. Op Chamilo vind je een link naar het juiste kanaal. Studenten worden aangemoedigd om daar ook vragen van anderen te beantwoorden. De lector rechtstreeks contacteren via e-mail of Teams chat doe je enkel als je een persoonlijke vraag hebt. Alle vragen over de leerstof gaan via het Teams-kanaal, zoals hierboven beschreven, zodat we jullie vragen hoogstens \u00e9\u00e9n keer moeten beantwoorden en iedereen meteen het antwoord kan zien.","title":"Studiebegeleiding reguliere studenten"},{"location":"#studiebegeleiding-afstandsleren-tile","text":"Studenten afstandsleren kunnen vragen stellen tijdens de contactmomenten voor TILE. Als deze contactmomenten niet op de campus doorgaan, gebeurt dit via Teams (videoconferencing). De precieze regeling wordt vooraf via Chamilo aangekondigd. Buiten de contactmomenten kunnen studenten vragen stellen via Teams, meer bepaald het chat-kanaal van het Team voor dit vak. Op Chamilo vind je een link naar het juiste kanaal. Studenten worden aangemoedigd om daar ook vragen van anderen te beantwoorden. De lector rechtstreeks contacteren via Teams chat of e-mail doe je enkel als je een persoonlijke vraag hebt. Alle vragen over de leerstof gaan via het Teams-kanaal, zoals hierboven beschreven, zodat we jullie vragen hoogstens \u00e9\u00e9n keer moeten beantwoorden en iedereen meteen het antwoord kan zien.","title":"Studiebegeleiding Afstandsleren (TILE)"},{"location":"#studiebegeleiding-2e-examenkans","text":"Studenten die doorverwezen worden naar de 2e examenkans, worden in principe niet begeleid en voeren de labo-opdrachten uit op eigen kracht. De lector zal je tijdens de feedback meedelen of en hoe je eventueel contact kan opnemen tijdens het zomerreces.","title":"Studiebegeleiding 2e examenkans"},{"location":"#weekplanning","text":"Volgende weekplanning is enkel bij benadering! Wanneer er lessen wegvallen, bijvoorbeeld door verlofdagen, kunnen er nog verschuivingen gebeuren. In de weken waar een specifiek onderwerp opgegeven staat, is er klassikale instructie voorzien over dat onderwerp. Tijdens de weken waar niets staat, is er ruimte voor het werken aan de labo-opdrachten en individuele opvolging Er zijn twee gequoteerde troubleshooting-labo's gepland met (voor reguliere studenten) verplichte aanwezigheid. Bij ziekte volg je de normale procedure voor het wettigen van je afwezigheid. Contacteer ook zo snel mogelijk je lector voor een inhaalopdracht. Bij het begin van een troubleshooting-opdracht krijg je een opstelling voorgeschoteld (typisch een virtuele machine) met configuratiefouten. Het is jouw taak die zo snel mogelijk systematisch op te sporen en op te lossen volgens de methode die je aangeleerd krijgt. Over dit proces en je resultaten schrijf je een laboverslag dat je indient op Chamilo. Studenten afstandsleren kunnen de troubleshooting-labo's thuis uitvoeren. Spreek met de lector in de loop van de voorziene weken een moment af waarop je tijd hebt om hier aan te werken. Op het afgesproken tijdstip krijg je een downloadlink naar de opgave en dien je v\u00f3\u00f3r de afgesproken deadline (in principe 4 uur na ontvangst van de opgave) je verslag in op Chamilo. Lesweek Onderwerp 1 Inleiding, praktische afspraken Installatie software M1. Containervirtualisatie 2 3 M2. Continuous Integration/Delivery 4 M3. Bottom-up Troubleshooting 5 Troubleshooting-labo 1 6 7 M4. Configuration Management 8 9 10 11 12 Troubleshooting-labo 2 13 Inhaalsessie (indien ingericht door je lector)","title":"Weekplanning"},{"location":"#evaluatie","text":"De evaluatie van dit opleidingsonderdeel gebeurt volledig via permanente evaluatie. Meer bepaald word je beoordeeld op de manier waarop je de opgegeven labo-opdrachten hebt uitgevoerd. Troubleshooting wordt ge\u00ebvalueerd op basis van vaardigheidstests, de andere taken op basis van een portfolio dat je samenstelt tijdens de loop van het semester en dat je op een evaluatiemoment tijdens de examenperiode komt verdedigen. Dat portfolio bestaat concreet uit volgende elementen: De broncode, door elke student bijgehouden in een toegewezen Git repository Gedetailleerde labo-verslagen, eveneens bijgehouden in Git of desgevallend ingediend via Chamilo Demonstratie van deelresultaten aan de lector tijdens het semester Demonstratie van het eindresultaat aan de lector tijdens de examenperiode De toekenning van het examencijfer gebeurt op basis van \u201crubrics\u201d die beschreven worden in de evaluatiekaart die gepubliceerd wordt op Chamilo. In een tabel worden een aantal criteria opgesomd, waar je aan moet voldoen. Je kan \u201cvoldoen\u201d op verschillende niveaus, meer bepaald \u201cbekwaam\u201d, \u201cgevorderd\u201d, \u201cdeskundig\u201d, of in het slechtste geval \u201cnog niet bekwaam\u201d. In de evaluatiekaart wordt beschreven wat je precies moet doen om elk niveau te behalen. Om te slagen voor dit vak moet je aantonen dat je voor alle technische criteria minstens \u201cbekwaam\u201d bent. Met andere woorden, zelfs als je voor slechts \u00e9\u00e9n criterium \u201cnog niet bekwaam\u201d bevonden wordt, kan je niet slagen, hoe goed je ook de andere modules hebt afgewerkt. De niet-technische criteria (bv. rapportering) kunnen het examencijfer afhankelijk van het behaalde niveau nog positief of negatief be\u00efnvloeden (en eventueel zelfs nog onder 10/20 doen zakken!). Merk op dat je zowel een werkend product moet opleveren (= broncode) als de verslagen indienen \u00e9n demo\u2019s geven. Als \u00e9\u00e9n van de deliverables ontbreekt, wordt de opdracht beschouwd als niet gerealiseerd.","title":"Evaluatie"},{"location":"#tussentijdse-deadlines","text":"Studenten moeten minstens drie keer tijdens het semester deelresulaten opleveren en persoonlijk demonstreren aan de lector. Deze periodes worden beschouwd als tussentijdse deadlines, waarbij de afspraken gelden die in het Onderwijs- en Examenreglement (OER) en de Departementale Aanvullingen daarop (DOER) gespecifieerd zijn. Niet tijdig deelresultaten opleveren wordt dus beschouwd als het niet respecteren van tussentijdse deadlines en wordt als dusdanig gesanctioneerd. Een student krijgt dan voor de labo-opdrachten die niet tijdig opgeleverd werden de beoordeling \u201cNog niet bekwaam\u201d en kan bijgevolg ook niet slagen.","title":"Tussentijdse deadlines"},{"location":"#specifieke-afspraken-reguliere-studenten","text":"Reguliere studenten gaan tijdens de contactmomenten regelmatig langs bij de lector voor individuele opvolging en voor het opleveren van deelresultaten. Ook als je weinig tot niets gerealiseerd hebt, kom je langs. Dat is immers een teken dat je ergens vast zit, en de lector kan je dan opnieuw op weg helpen.","title":"Specifieke afspraken reguliere studenten"},{"location":"#specifieke-afspraken-afstandsleren","text":"Studenten afstandsleren kunnen op verschillende manieren deelresultaten opleveren: aan de hand van een screencast (bv. publiceren via Youtube of Panopto, link doorsturen naar de lector), via videoconferencing (Microsoft Teams, na afspraak), tijdens de contactmomenten voor TILE-studenten, als de lector daar aanwezig is (en enkel na afspraak)","title":"Specifieke afspraken afstandsleren"},{"location":"#tweede-examenkans","text":"Wie niet slaagt, krijgt een tweede examenkans in de vorm van een individuele opdracht. De precieze opdracht hangt af van je evaluatie en bestaat concreet uit: \u00e9\u00e9n labo-opdracht die voor iedereen hetzelfde is (onderwerp: Kubernetes) labo's afwerken van de modules waar je je bekwaamheid nog niet hebt aangetoond. Deze individuele opdracht wordt meteen vastgelegd en besproken op het finale evaluatiemoment. Als je nog geen individuele opdracht gekregen hebt op het evaluatiemoment (bijvoorbeeld omdat je afwezig was), dan kom je naar de feedback. Studenten afstandsleren kunnen dit ook per e-mail regelen of een afspraak maken om dit te bespreken via Teams, mits dit gebeurt v\u00f3\u00f3r aanvang van het intersemestrieel reces. Wie na afloop van de feedback nog geen afspraak gemaakt heeft voor een individuele opdracht, geeft daarmee te kennen niet te willen deelnemen aan de 2e examenkans.","title":"Tweede examenkans"},{"location":"#licentie-informatie","text":"Deze syllabus is samengesteld door Bert Van Vreckem . De tekst van de syllabus en de slides vallen onder de Creative Commons Naamsvermelding-GelijkDelen 4.0 Internationale Publieke Licentie .","title":"Licentie-informatie"},{"location":"cfgmgmt/","text":"Configuration Management Leerdoelen Het concept van een configuration management system begrijpen De belangrijkste eigenschappen van een configuration management system, nl. de declaratieve aard, idempotentie begrijpen De voordelen van een configuration management system t.o.v. klassieke scripts begrijpen Ansible kunnen gebruiken om een netwerkservice op te zetten Basisconcepten van Ansible begrijpen en kunnen toepassen: playbooks, variabelen, modules, rollen. Een playbooks kunnen schrijven Bestaande rollen gebruiken en rolvariabelen aanpassen voor de specifieke situatie Inleiding Een configuration management system stelt een systeembeheerder in staat om de gewenste toestand van een systeem te gedetailleerd te beschrijven en aan de hand daarvan dat systeem naar die toestand te brengen. Dit impliceert dat deze beschrijving declaratief is, d.w.z. dat je de eindtoestand beschrijft, niet de stappen of commando's die nodig zijn om die toestand te bereiken. Als je bijvoorbeeld in Ansible (het configuration management system dat we in deze cursus gebruiken) wil specifi\u00ebren dat de SSH-server moet draaien, schrijf je: - name: Ensure the SSH daemon is running service: name: sshd state: started Ansible voert op de achtergrond de juiste commando's uit, afhankelijk van de Linux-distributie die op de machine draait ( systemctl start sshd op moderne Systemd-gebaseerde distro's, service sshd start op bepaalde oudere systemen, enz.). Een andere eigenschap van een configuration management system is idempotentie . Dat betekent dat na het succesvol uitvoeren het systeem gegarandeerd in \u00e9\u00e9n iteratie naar de gewenste eindtoestand gebracht is. Als het proces met succes afgesloten wordt, moet je dus achteraf niet controleren of de SSH-daemon effectief draait. Als het configuration management system er om de ene of de andere reden niet in slaagt om de SSH-server op te starten (bv. door een fout in het configuratiebestand), dan stopt het proces meteen met het uitvoeren en toont een foutboodschap. Een config management system zal ook enkel die wijzigingen doorvoeren die nodig zijn. Wanneer je de code dus een tweede keer uitvoert, zal er niets meer gewijzigd worden (want we weten dat het systeem zich al in de gewenste toestand bevindt). Sommige config management systemen hebben een eigen taal ontwikkeld om de gewenste toestand in te beschrijven (bv. Puppet), andere gebruiken een bestaande taal (bv. Chef, configuratie in Ruby). Bij Ansible beschrijf je de configuratie van een systeem met YAML (een variant van JSON), een eenvoudig tekstformaat om data te structureren op een manier die makkelijk te interpreteren is zowel door mensen als computers. De bestanden die deze configuratiecode bevatten worden playbooks genoemd. Als je deze playbooks op een specifieke manier structureert en herbruik baar maakt, spreekt men van een rol . Je kan rollen toekennen aan een host, en specifieke instellingen voor die host aanpassen door het invullen van variabelen . Op Ansible Galaxy kan je honderden rollen vinden die door hun auteurs gepubliceerd zijn. Structuur van een Ansible playbook De directorystructuur van een Ansible-project ligt vast en wordt uitvoerig beschreven in de documentatie .","title":"ConfigMgmt"},{"location":"cfgmgmt/#configuration-management","text":"","title":"Configuration Management"},{"location":"cfgmgmt/#leerdoelen","text":"Het concept van een configuration management system begrijpen De belangrijkste eigenschappen van een configuration management system, nl. de declaratieve aard, idempotentie begrijpen De voordelen van een configuration management system t.o.v. klassieke scripts begrijpen Ansible kunnen gebruiken om een netwerkservice op te zetten Basisconcepten van Ansible begrijpen en kunnen toepassen: playbooks, variabelen, modules, rollen. Een playbooks kunnen schrijven Bestaande rollen gebruiken en rolvariabelen aanpassen voor de specifieke situatie","title":"Leerdoelen"},{"location":"cfgmgmt/#inleiding","text":"Een configuration management system stelt een systeembeheerder in staat om de gewenste toestand van een systeem te gedetailleerd te beschrijven en aan de hand daarvan dat systeem naar die toestand te brengen. Dit impliceert dat deze beschrijving declaratief is, d.w.z. dat je de eindtoestand beschrijft, niet de stappen of commando's die nodig zijn om die toestand te bereiken. Als je bijvoorbeeld in Ansible (het configuration management system dat we in deze cursus gebruiken) wil specifi\u00ebren dat de SSH-server moet draaien, schrijf je: - name: Ensure the SSH daemon is running service: name: sshd state: started Ansible voert op de achtergrond de juiste commando's uit, afhankelijk van de Linux-distributie die op de machine draait ( systemctl start sshd op moderne Systemd-gebaseerde distro's, service sshd start op bepaalde oudere systemen, enz.). Een andere eigenschap van een configuration management system is idempotentie . Dat betekent dat na het succesvol uitvoeren het systeem gegarandeerd in \u00e9\u00e9n iteratie naar de gewenste eindtoestand gebracht is. Als het proces met succes afgesloten wordt, moet je dus achteraf niet controleren of de SSH-daemon effectief draait. Als het configuration management system er om de ene of de andere reden niet in slaagt om de SSH-server op te starten (bv. door een fout in het configuratiebestand), dan stopt het proces meteen met het uitvoeren en toont een foutboodschap. Een config management system zal ook enkel die wijzigingen doorvoeren die nodig zijn. Wanneer je de code dus een tweede keer uitvoert, zal er niets meer gewijzigd worden (want we weten dat het systeem zich al in de gewenste toestand bevindt). Sommige config management systemen hebben een eigen taal ontwikkeld om de gewenste toestand in te beschrijven (bv. Puppet), andere gebruiken een bestaande taal (bv. Chef, configuratie in Ruby). Bij Ansible beschrijf je de configuratie van een systeem met YAML (een variant van JSON), een eenvoudig tekstformaat om data te structureren op een manier die makkelijk te interpreteren is zowel door mensen als computers. De bestanden die deze configuratiecode bevatten worden playbooks genoemd. Als je deze playbooks op een specifieke manier structureert en herbruik baar maakt, spreekt men van een rol . Je kan rollen toekennen aan een host, en specifieke instellingen voor die host aanpassen door het invullen van variabelen . Op Ansible Galaxy kan je honderden rollen vinden die door hun auteurs gepubliceerd zijn.","title":"Inleiding"},{"location":"cfgmgmt/#structuur-van-een-ansible-playbook","text":"De directorystructuur van een Ansible-project ligt vast en wordt uitvoerig beschreven in de documentatie .","title":"Structuur van een Ansible playbook"},{"location":"ci-cd/","text":"Continuous Integration/Delivery Developers will usually push to a Git server that is maintained internally. When a new commit is pushed, it will trigger Jenkins to start the build process. First, a linter and/or static code analysis may be run to ensure that all code complies with style guidelines. After that, the code can be built. Next, unit tests can be executed. If that succeeds, the application can be packaged and launched in a test environemt. In the test environment, additional integration/acceptance tests can be run. If all that succeeds, the packaged application can be deployed in the production environment. cfr. Reflectie in labo-opgave Iets over trunk based development : het concept van branches staat haaks op de filosofie van CI/CD.","title":"CICD"},{"location":"ci-cd/#continuous-integrationdelivery","text":"Developers will usually push to a Git server that is maintained internally. When a new commit is pushed, it will trigger Jenkins to start the build process. First, a linter and/or static code analysis may be run to ensure that all code complies with style guidelines. After that, the code can be built. Next, unit tests can be executed. If that succeeds, the application can be packaged and launched in a test environemt. In the test environment, additional integration/acceptance tests can be run. If all that succeeds, the packaged application can be deployed in the production environment. cfr. Reflectie in labo-opgave Iets over trunk based development : het concept van branches staat haaks op de filosofie van CI/CD.","title":"Continuous Integration/Delivery"},{"location":"containers/","text":"Containervirtualisatie Leerdoelen Het concept van containervirtualisatie begrijpen en kunnen vergelijken met klassieke vormen van servervirtualisatie. Docker kunnen gebruiken om een netwerkservice of webapplicatie op te zetten: Docker images kunnen beheren en gebruiken Docker containers kunnen opstarten en beheren, eigenschappen opvragen De werking van volumes voor persistente data Een Dockerfile kunnen schrijven of aanpassen voor een specifieke situatie De werking van het gelaagde bestandssysteem begrijpen Begrijpen hoe de inhoud van een Dockerfile invloed heeft op het aantal lagen van een container image docker-compose kunnen gebruiken om reproduceerbare omgevingen met meerdere, onderling afhankelijke, Docker containers op te zetten Inleiding Containervirtualisatie is een vorm van servervirtualisatie die zich vooral onderscheidt van andere vormen door het feit dat virtuele machines, containers genaamd, enorm klein zijn en dus ook minder systeembronnen van het host-systeem gebruiken. Het concept bestaat al tientallen jaren, o.a. binnen de context van mainframes, maar is pas echt bekend geworden na de demo van Docker op de conferentie PyCon 2013. Bij \"full virtualization\" zal de virtuele machine een simulatie zijn van een fysieke computer met een cpu, geheugen, een harde schijf, enz. Om een en ander performanter te laten verlopen kan het host-systeem de VM rechtstreeks toegang geven tot bepaalde hardware-bronnen, bv. door een cpu-kern of een bepaald deel van het fysieke RAM-geheugen exclusief toe te kennen aan die VM. Op deze VM kan je een besturingssysteem installeren, programmabibliotheken en de nodige applicatie(s). Containervirtualisatie werkt anders, in die zin dat er in een container enkel een applicatie zit (samen met eventuele afhankelijkheden zoals programmabibliotheken). Een container \"hergebruikt\" de kernel van het onderliggende besturingssysteem van de host.","title":"Containers"},{"location":"containers/#containervirtualisatie","text":"","title":"Containervirtualisatie"},{"location":"containers/#leerdoelen","text":"Het concept van containervirtualisatie begrijpen en kunnen vergelijken met klassieke vormen van servervirtualisatie. Docker kunnen gebruiken om een netwerkservice of webapplicatie op te zetten: Docker images kunnen beheren en gebruiken Docker containers kunnen opstarten en beheren, eigenschappen opvragen De werking van volumes voor persistente data Een Dockerfile kunnen schrijven of aanpassen voor een specifieke situatie De werking van het gelaagde bestandssysteem begrijpen Begrijpen hoe de inhoud van een Dockerfile invloed heeft op het aantal lagen van een container image docker-compose kunnen gebruiken om reproduceerbare omgevingen met meerdere, onderling afhankelijke, Docker containers op te zetten","title":"Leerdoelen"},{"location":"containers/#inleiding","text":"Containervirtualisatie is een vorm van servervirtualisatie die zich vooral onderscheidt van andere vormen door het feit dat virtuele machines, containers genaamd, enorm klein zijn en dus ook minder systeembronnen van het host-systeem gebruiken. Het concept bestaat al tientallen jaren, o.a. binnen de context van mainframes, maar is pas echt bekend geworden na de demo van Docker op de conferentie PyCon 2013. Bij \"full virtualization\" zal de virtuele machine een simulatie zijn van een fysieke computer met een cpu, geheugen, een harde schijf, enz. Om een en ander performanter te laten verlopen kan het host-systeem de VM rechtstreeks toegang geven tot bepaalde hardware-bronnen, bv. door een cpu-kern of een bepaald deel van het fysieke RAM-geheugen exclusief toe te kennen aan die VM. Op deze VM kan je een besturingssysteem installeren, programmabibliotheken en de nodige applicatie(s). Containervirtualisatie werkt anders, in die zin dat er in een container enkel een applicatie zit (samen met eventuele afhankelijkheden zoals programmabibliotheken). Een container \"hergebruikt\" de kernel van het onderliggende besturingssysteem van de host.","title":"Inleiding"},{"location":"intro/","text":"Inleiding, opzetten werkomgeving Motivatie TODO: Belang van automatisering Casus: OVF brand Automatisering van de levenscyclus van een serversysteem TODO: Provisioning: van een lege machine (bare metal of VM) naar minimale installatie van een OS + voorzieningen om het systeem te beheren (Just Enough Operating System, JEOS) Tools: Packer, Docker Artefacten: Vagrant base box, VM image (bv. .ova) Configuration Management: van JEOS naar volledig geconfigureerd systeem, klaar om in productie te gaan Tools: Ansible, Puppet, Chef, CFEngine, SaltStack, ... Artefacten: Playbook (Ansible), Manifest (Puppet), Cookbook (Chef), ... Software delivery, Release Engineering Tools: CI/CD pipelines: Jenkins, Travis CI, Circle CI, Gitlab CI, Github Actions Packaging: rpmbuild, dpkg-deb, fpm Package management: RPM, deb, npm (JavaScript), RubyGems, pip (Python), Helm (Kubernetes), Chocolatey/NuGet (Windows/.Net), ... Repository management: Pulp Orchestration: geautomatiseerd beheer van systemen in productie (bv. rolling updates, blue/green deployment, ...) Tools: Ansible, SaltStack, Kubernetes Monitoring: systemen in productie in de gaten houden, waarschuwen bij problemen, opsporen van oorzaken Tools: Traditionele monitoring-systemen: Icinga, Nagios & forks, ... Time Series Databases: Prometheus, collectd, Cacti, ... Logging: Elastic stack (ElasticSearch, LogStash, Kibana), Splunk, Fluentd, syslog-ng, PagerDuty, ... Opzetten werkomgeving Installeer eerst de nodige software, meer bepaald de laatste stabiele versie bij aanvang van het semester. De volledige neerslag van al wat je voor deze cursus doet wordt bijgehouden in het versiebeheersysteem Git . Via Chamilo vind je een link die, als je er op doorklikt, een nieuwe repository cre\u00ebert waar je in kan werken. Deze is zichtbaar voor jou en de lector. Naast de configuratie van de opgezette systemen zal je er ook je documentatie bijhouden, zoals testrapporten, procedures, cheat sheets en checklists. Richtlijnen voor het opstarten van je Git project: In principe moet je al een Github account hebben. Als je dit nog niet gedaan hebt, koppel dan zeker je @student.hogent.be adres aan het account. Je kan dan het Github Student Developer Pack aanvragen met allerlei interessante aanbiedingen. Het is mogelijk om meerdere e-mailadressen te registreren, en het is zinvol om ook je priv\u00e9-adres te koppelen. Op die manier kan je je Github-account nog gebruiken na je afstuderen. Zorg dat je een SSH-sleutelpaar hebt aangemaakt. Op die manier kan je het pushen naar Github vereenvoudigen. Het is dan meer bepaald niet meer nodig een gebruikersnaam en wachtwoord op te geven. Voer in een Bash-terminal het commando ssh-keygen uit, en volg de richtlijnen die het geeft. Geef voor je gemak een lege passphrase op (zoniet moet je telkens je de sleutel gebruikt je passphrase intikken). Normaal zou er in de directory ~/.ssh ( ~ staat voor je home-directory: op Windows C:\\Gebruikers\\Gebruikersnaam , op MacOS /Users/Gebruikersnaam , op Windows /home/gebruikersnaam ) twee bestanden aangemaakt moeten zijn: id_rsa en id_rsa.pub . Het eerste is je private sleutel (die je geheim moet houden), het tweede de publieke. Die laatste kan je op Github registreren via je profielinstellingen (klik op je avatar rechtsboven, volg Settings en dan SSH and GPG keys ). Controleer je Git basisconfiguratie (in ~/.gitconfig ) en als je dit nog niet gedaan hebt, maak je volgende aanpassingen: console git config --global user.name \u201dVOORNAAM NAAM\u201d git config --global user.email \u201dVOORNAAM.NAAM@student.hogent.be\u201d git config --global push.default simple git config --global core.autocrlf input git config --global pull.rebase true Maak lokaal een directory aan die je voorbehoudt voor al wat met deze cursus te maken heeft. Binnen deze directory kan je je Github-repository klonen. Klik op de Github-pagina van je repository op de groene knop rechts (Code), kies voor \u201cSSH\u201d kopieer de link van de vorm git@github.com:HoGentTIN/REPO_ NAAM-GEBRUIKERSNAAM.git. console cd Documents/Courses/EnterpriseLinux/ git clone git@github.com:HoGentTIN/REPONAAM-GEBRUIKERSNAAM.git Dit maakt een lokale kopie van de repository in een subdirectory. Je mag de naam van deze directory aanpassen en die verplaatsen, alles blijft gewoon werken. 5. Cre\u00eber een nieuwe branch met de naam solution om je eigen code en documentatie bij te houden. Verderop wordt duidelijk waarom dit belangrijk is. console git switch -c solution Open de directory in Visual Studio Code en open het bestand README.md . Vul bovenaan de gevraagde gegevens in (naam, klasgroep, enz.) en commit deze wijziging. Lees het README-bestand voor verdere instructies. Errata Wanneer er errata in de opgave gepubliceerd worden, kan je die relatief eenvoudig binnen halen, maar enkel als je een eigen solution -branch aangemaakt hebt. Eerst moet je zorgen dat je updates kan binnenhalen van de repository met de opdracht. Het volgende commando zorgt dat je kan synchroniseren met die repository. Dit moet slechts \u00e9\u00e9n keer gebeuren. console git remote add upstream https://github.com/HoGentTIN/infra-labs.git Wanneer er nieuwe commits gebeurd zijn in de opgave, kan je de wijzigingen telkens zo ophalen: ```console git switch main git pull upstream main git switch solution git rebase main ``` De eerste twee regels zorgen er voor dat jouw versie van de main-branch up-to-date gebracht wordt met de nieuwe commits. In de derde regel ga je opnieuw naar je eigen branch. Voorlopig is er daar nog niets gewijzigd In de vierde regel, tenslotte, ga je de wijzigingen in de opgave op jouw eigen versie toepassen. Mogelijks komen er hier conflicten naar boven tussen bepaalde bestanden in de opgave en jouw wijzigingen. De command-line Git client geeft goede instructies om deze conflicten op te lossen. Zie hieronder voor een voorbeeld. Deze procedure werkt niet als je geen branch voor je eigen oplossing gemaakt hebt. In dat geval haal je jezelf een hoop ellende op de hals... Als er conflicten optreden in bestanden, blijft Git in rebase-modus\u201d steken en kan je voorlopig niet verder werken. Voer eerst git status uit om een lijst te krijgen met alle betrokken bestanden. $ git status rebase in progress; onto e5bd2df You are currently rebasing branch 'master' on 'e5bd2df'. (fix conflicts and then run \u201dgit rebase --continue\u201d) (use \u201dgit rebase --skip\u201d to skip this patch) (use \u201dgit rebase --abort\u201d to check out the original branch) Unmerged paths: (use \u201dgit reset HEAD <file>...\u201d to unstage) (use \u201dgit add <file>...\u201d to mark resolution) both modified: README.md no changes added to commit (use \u201dgit add\u201d and/or \u201dgit commit -a\u201d) Open deze \u00e9\u00e9n voor \u00e9\u00e9n met je teksteditor en zoek naar de markeringen voor conflicten, bv. If you have questions, please <<<<<< HEAD open an issue ====== ask your question in IRC. >>>>>> main VSCode toont deze conflicten in een kleur zodat ze in het oog springen. Bewerk alle bestanden met conflicten en verbeter de code. Vervolgens voeg je alle aangepaste bestanden toe met git add . en kan je het rebase-proces verder zetten met git rebase --continue . Gebruik tussendoor regelmatig git status om te zien hoe ver je staat en welke commando\u2019s je nodig hebt om een stap verder te gaan. Tips voor effici\u00ebnt werken In deze sectie vind je enkele algemene richtlijnen die je helpen vlotter en effici\u00ebnter te werken. Voor je aan een labo-opdracht begint, bereid je je eerst voor door alle aangereikte studiematerialen te bestuderen: handleidingen, screencasts, ... \u201cVan buiten blokken\u201d is helemaal niet nodig, maar zorg er in elk geval voor dat je er in die mate vertrouwd bent, dat je snel gericht kan zoeken naar juiste, relevante informatie. Je vindt die via de bronvermeldingen in deze syllabus, of via de opgave. Open meerdere terminalvensters/consoles naast elkaar (TODO: figuur invoegen). Elke terminal krijgt zijn eigen functie, bijvoorbeeld: Vim editor (of VS Code/Sublime/Notepad/...in een apart venster); doorvoeren van wijzigingen aan de configuratie; ingelogd op VM, voor commando\u2019s; ingelogd op VM, voor tonen logbestanden. Werk stap voor stap. Schrijf niet teveel code ineens. Probeer eerst een minimaal werkende opstelling te verkrijgen en registreer meteen in Git. Maak minimale wijzigingen en test elke wijziging uit. Hoe groter en ingrijpender de wijzigingen, hoe meer kans op fouten en hoe moeilijker die te debuggen zijn. Zodra iets werkt, en je bent een stap verder, registreer je dit meteen in Git en geef je een duidelijke, beschrijvende commit-boodschap. Gebruik Git op de command-line. Bij de meeste Git commando\u2019s krijg je gedetailleerde uitleg over hoe je een stap verder moet gaan en ook hoe je de laatste stap kan ongedaan maken. Dit geeft op de duur een beter inzicht in hoe Git precies werkt dan je via een GUI kan krijgen. De meeste GUIs voor Git verbergen belangrijke details waardoor je niet goed kan begrijpen wat je aan het doen bent. Commit regelmatig wijzigingen in je code en probeer elke commit te beperken tot \u00e9\u00e9n enkele \u201creden\u201d om wijzigingen aan te brengen aan de bestaande code. Dit maakt de \u201cgeschiedenis\u201d van je project transparanter en maakt ook dat je makkelijker kan terugkeren naar een bepaalde stap wanneer je de mist in gaat. Maak backups van originele, ongewijzigde configuratiebestanden zodat je er op kan terugvallen als er iets misloopt. Soms heb je zodanig zitten \u201cprutsen\u201d dat je er niet meer in slaagt de service te laten werken. Gebruik vagrant destroy . Wanneer je veel manuele wijzigingen hebt aangebracht in een VM, ben je op de duur niet meer zeker dat die zich in de gewenste toestand bevindt. Of je kan door experimenteren de VM onbruikbaar gemaakt hebben. Door de VM te verwijderen en opnieuw op te bouwen (met vagrant up ) kan je opnieuw beginnen van een werkende versie (als je de vorige richtlijnen opvolgt, tenminste!). Ook wanneer je denkt klaar te zijn met een deelopdracht, genereer de VM nog eens helemaal opnieuw en voer alle acceptatietests uit (indien die voorzien zijn in de labo-opdracht). Bash tips In deze sectie vind je een aantal tips voor het gebruik van de Bash-shell. In deze cursus maak je intensief gebruik van de shell, en het loont de moeite om Bash wat beter te leren kennen. Het zit immers vol met interessante features die je toelaten productiever te werken. Online is hier nog veel meer over te vinden (Rowe, 2009). De tips hier gelden ook voor Windows- en MacOS-gebruikers! Windows-gebruikers hebben beschikking over een recente versie van Bash via Git (Git Bash). In MacOS X zit ook een Bash-shell, weliswaar een zeer oude versie. Je kan een recente versie installeren via HomeBrew. Gebruik TAB-completion. Je kan een deel van een commando of pad intikken en dan de TAB-toets indrukken. Indien mogelijk zal Bash het woord vervolledigen, of mogelijke alternatieven tonen. Als je de package bash-completion installeert zijn er nog veel meer mogelijkheden. Gebruik de command-history. Bash houdt de commando\u2019s die je eerder gebruikt hebt bij. Met de pijltjestoetsen kan je eerdere commando\u2019s terug halen. Gebruik Ctrl-R om te zoeken in de command history. Je kan dan een fragment van het commando intikken, Bash toont dan het laatste commando waar dat tekstfragment in voorkomt. Bang-bang!! In Bash zijn er enkele shortcuts voorzien voor (delen van) het vorige commando. !! staat voor het gehele vorige commando, !$ voor het laatste argument en !* voor alle argumenten. Een voorbeeldje van het gebruik: $ dnf update You need to be root to perform this command. $ sudo !! sudo dnf update [...] $ mkdir -p some/long/path/i/dont/want/to/repeat $ cd !$ cd some/long/path/i/dont/want/to/repeat $ Toetsenbordcombinaties. Naast Ctrl-R van hierboven zijn er nog een aantal nuttige toetsenbordcombinaties. Ctrl-C onderbreekt het huidige proces Ctrl-Z pauzeert het huidige proces (haal het terug met fg) Ctrl-D sluit de shell af (enkel op lege regel) Ctrl-K verwijdert de tekst rechts van de cursor Ctrl-U verwijdert de tekst links van de cursor Ctrl-T verwisselt letterteken onder de cursor met dat voor de cursor Alt-T verwisselt woord voor met woord na de cursor Er bestaan nog veel meer combinaties. Deze kan je vinden in de man-pagina bash(1) in de sectie READLINE (subsectie Readline Command Names en volgende). Personaliseer de shell. Je kan het gedrag van de shell in hoge mate aan je eigen wensen aanpassen door het bestand ~/.bashrc aan te passen. Je kan het gedrag van tab-completion of de command history aanpassen, een eigen commandoprompt instellen, aliassen (zie verder) of functies defini\u00ebren, enz. Het zou ons te ver leiden om alle mogelijkheden uit te diepen, maar je kan een relatief eenvoudig voorbeeld vinden in https://github.com/bertvv/server-dotfiles/ (installatie-instructies te vinden in de README), en een meer uitgebreid voorbeeld in https://github.com/bertvv/dotfiles/ (of gelijknamige reposi- tories van andere Github-gebruikers). Aliassen zijn een soort shortcuts voor commando\u2019s die je vaak gebruikt. Dit kan enorm veel typwerk besparen. Je kan ze toevoegen in je ~/.bashrc . Enkele voorbeelden ter inspiratie: alias l='ls -l --si --time-style=long-iso --color' alias a='git add' alias c='git commit -m' alias h='git log --pretty=\u201dformat:%C(yellow)%h %C(blue)%ad %C(reset)%sC(red)%d %C(green)%an%C(reset), %C(cyan)%ar\" --date=short --graph --all' alias s='git status' alias vu='vagrant up' alias vD='vagrant destroy' alias infra='cd /home/bert/Documents/Courses/InfraAutomation/21-22' Nog meer voorbeelden vind je in https://github.com/bertvv/dotfiles/blob/master/.bash.d/aliases.sh . Voor meer complexere shortcuts is alias minder geschikt, maar daarvoor kan je in .bashrc een functie defini\u00ebren, bv. # Usage: dip CONTAINER # This function will get the IP-address of the specified Docker container dip() { docker container inspect \"${1}\" | jq '.[]|.NetworkSettings.Networks|.[]|.IPAddress' } Vagrant Vagrant is een command line tool die het aanmaken en configureren van virtuele machines automatiseert. Het ondersteunt een aantal virtualisatieplatforms, o.a. VirtualBox, Hyper-V, libvirt, enz. Wij zullen het gebruiken in combinatie met VirtualBox. Je Git repository bevat een aantal Vagrant-omgevingen voor het opzetten van de VMs voor je labo-opdrachten. Je kan een overzicht van de VMs opvragen met vagrant status . Dit commando moet uitgevoerd worden in een directory waar een Vagrantfile te vinden is. In dat geval ziet de uitvoer er bijvoorbeeld zo uit: $ vagrant status Current machine states: srv001 not created (virtualbox) The environment has not yet been created. Run `vagrant up` to create the environment. If a machine is not created, only the default provider will be shown. So if a provider is not listed, then the machine is not created for that environment. $ Deze omgeving bevat \u00e9\u00e9n virtuele machine met naam srv001 . Deze VM kan opgestart worden met vagrant up srv001 . De eerste keer dat je dit doet wordt er een basis-VM gedownload met een minimale Linux-installatie. Doe dit best op een performant netwerk, bv. het bekabelde netwerk op de campus of thuis/op kot, en niet via WiFi. Deze \u201cbase box\u201d wordt bijgehouden en zal telkens dienst doen als basis voor het opzetten van alle hosts in onze opstelling. Het downloaden gebeurt dus slechts \u00e9\u00e9n keer. Na opstarten kan je inloggen met vagrant ssh srv001 . Je bent ingelogd als gebruiker vagrant en kan commando\u2019s uitvoeren met root-rechten door er sudo voor te plaatsen (geen wachtwoord vereist). Als het nodig mocht zijn: het wachtwoord van de gebruikers vagrant en root is telkens vagrant . Als je ls / uitvoert, zal je merken dat er een directory /vagrant bestaat. Dit is je lokale repository op je fysieke systeem die gemount is binnen de VM. Dit is een eenvoudige manier om bestanden te delen tussen VM en het fysieke systeem. Let er op dat je VMs niet meer vanuit je VirtualBox GUI opstart of bewerkt. Doe dit nu enkel met Vagrant en vanuit een terminal. Het commando vagrant moet altijd uitgevoerd worden vanuit de directory waar het bestand Vagrantfile zich bevindt. De belangrijkste Vagrant commando\u2019s worden opgesomd in de tabel hieronder. Daar waar [VM] tussen rechte haken staat, is dat een optioneel argument. Als je het weglaat, wordt de actie op alle VMs tegelijk uitgevoerd. Commando Functie vagrant status Geef een overzicht van de Vagrant omgeving vagrant up [VM] Start VM op vagrant provision [VM] Voer het configuratiescript voor VM uit vagrant ssh VM Log in op VM als gebruiker vagrant vagrant halt [VM] Zet VM uit vagrant reload [VM] Herstart VM vagrant destroy [VM] Vernietig VM Markdown Markdown is een syntax die toelaat om geformatteerde tekst in een eenvoudige platte tekstformaat te schrijven en deze vervolgens om te zetten naar HTML (zodat je het kan bekijken in de webbrowser), PDF (om af te drukken), LaTeX, enz. Markdown is de standaard geworden voor het schrijven van handleidingen en documentatie op Github . Je labo-verslagen en documentatie moeten ook in Markdown geschreven worden. Dit heeft een aantal voordelen: omdat Markdown tekstgebaseerd is, kan het in een versiebeheersysteem opgeslagen worden. Met Word-documenten gaat dit niet (Git is niet geschikt om wijzigingen in binaire bestanden te traceren). Een verzameling tekstbestanden is ook makkelijker te doorzoeken dan een verzameling Word-documenten, bijvoorbeeld met een tool als The Silver Searcher . Leer tekst correct opmaken met Markdown. Dit is heel eenvoudig te leren en kost weinig inspanning. Maar als je je niet houdt aan enkele basisregels, wordt je tekst niet correct omgezet naar HTML met een moeilijk leesbaar verslag als gevolg. Goede teksteditors bieden ondersteuning voor Markdown en kunnen je een preview laten zien van hoe het bestand er in HTML zou uitzien. Er bestaan VSCode plugins die de basis-ondersteuning uitbreidt met enkele features die je productiviteit verhogen. Markdown All in One (door Yu Zhang) en markdownlint (door David Anson) zijn de interessantste: Shortcut Ctrl+Shift+V toont een preview van het bestand met opmaak Shortcut Alt+Shift+F (Linux: Ctrl+Shift+I ) formatteert tabellen zodat de verticale lijnen altijd mooi uitgelijnd zijn. Opmaak van wiskundige formules in LaTeX-notatie Markdownlint toont fouten in je Markdown-code aan de hand van een gekleurde golvende lijnt onder de tekst (zoals een spell-checker) en vat ze onderaan in het \"Problems\"-paneel samen in een lijst. Met deze hulpmiddelen is het eenvoudig om Markdown correct te gebruiken en een mooi opgemaakte HTML-pagina te krijgen als je je verslagen naar Github pusht.","title":"Intro"},{"location":"intro/#inleiding-opzetten-werkomgeving","text":"","title":"Inleiding, opzetten werkomgeving"},{"location":"intro/#motivatie","text":"TODO: Belang van automatisering Casus: OVF brand","title":"Motivatie"},{"location":"intro/#automatisering-van-de-levenscyclus-van-een-serversysteem","text":"TODO: Provisioning: van een lege machine (bare metal of VM) naar minimale installatie van een OS + voorzieningen om het systeem te beheren (Just Enough Operating System, JEOS) Tools: Packer, Docker Artefacten: Vagrant base box, VM image (bv. .ova) Configuration Management: van JEOS naar volledig geconfigureerd systeem, klaar om in productie te gaan Tools: Ansible, Puppet, Chef, CFEngine, SaltStack, ... Artefacten: Playbook (Ansible), Manifest (Puppet), Cookbook (Chef), ... Software delivery, Release Engineering Tools: CI/CD pipelines: Jenkins, Travis CI, Circle CI, Gitlab CI, Github Actions Packaging: rpmbuild, dpkg-deb, fpm Package management: RPM, deb, npm (JavaScript), RubyGems, pip (Python), Helm (Kubernetes), Chocolatey/NuGet (Windows/.Net), ... Repository management: Pulp Orchestration: geautomatiseerd beheer van systemen in productie (bv. rolling updates, blue/green deployment, ...) Tools: Ansible, SaltStack, Kubernetes Monitoring: systemen in productie in de gaten houden, waarschuwen bij problemen, opsporen van oorzaken Tools: Traditionele monitoring-systemen: Icinga, Nagios & forks, ... Time Series Databases: Prometheus, collectd, Cacti, ... Logging: Elastic stack (ElasticSearch, LogStash, Kibana), Splunk, Fluentd, syslog-ng, PagerDuty, ...","title":"Automatisering van de levenscyclus van een serversysteem"},{"location":"intro/#opzetten-werkomgeving","text":"Installeer eerst de nodige software, meer bepaald de laatste stabiele versie bij aanvang van het semester. De volledige neerslag van al wat je voor deze cursus doet wordt bijgehouden in het versiebeheersysteem Git . Via Chamilo vind je een link die, als je er op doorklikt, een nieuwe repository cre\u00ebert waar je in kan werken. Deze is zichtbaar voor jou en de lector. Naast de configuratie van de opgezette systemen zal je er ook je documentatie bijhouden, zoals testrapporten, procedures, cheat sheets en checklists. Richtlijnen voor het opstarten van je Git project: In principe moet je al een Github account hebben. Als je dit nog niet gedaan hebt, koppel dan zeker je @student.hogent.be adres aan het account. Je kan dan het Github Student Developer Pack aanvragen met allerlei interessante aanbiedingen. Het is mogelijk om meerdere e-mailadressen te registreren, en het is zinvol om ook je priv\u00e9-adres te koppelen. Op die manier kan je je Github-account nog gebruiken na je afstuderen. Zorg dat je een SSH-sleutelpaar hebt aangemaakt. Op die manier kan je het pushen naar Github vereenvoudigen. Het is dan meer bepaald niet meer nodig een gebruikersnaam en wachtwoord op te geven. Voer in een Bash-terminal het commando ssh-keygen uit, en volg de richtlijnen die het geeft. Geef voor je gemak een lege passphrase op (zoniet moet je telkens je de sleutel gebruikt je passphrase intikken). Normaal zou er in de directory ~/.ssh ( ~ staat voor je home-directory: op Windows C:\\Gebruikers\\Gebruikersnaam , op MacOS /Users/Gebruikersnaam , op Windows /home/gebruikersnaam ) twee bestanden aangemaakt moeten zijn: id_rsa en id_rsa.pub . Het eerste is je private sleutel (die je geheim moet houden), het tweede de publieke. Die laatste kan je op Github registreren via je profielinstellingen (klik op je avatar rechtsboven, volg Settings en dan SSH and GPG keys ). Controleer je Git basisconfiguratie (in ~/.gitconfig ) en als je dit nog niet gedaan hebt, maak je volgende aanpassingen: console git config --global user.name \u201dVOORNAAM NAAM\u201d git config --global user.email \u201dVOORNAAM.NAAM@student.hogent.be\u201d git config --global push.default simple git config --global core.autocrlf input git config --global pull.rebase true Maak lokaal een directory aan die je voorbehoudt voor al wat met deze cursus te maken heeft. Binnen deze directory kan je je Github-repository klonen. Klik op de Github-pagina van je repository op de groene knop rechts (Code), kies voor \u201cSSH\u201d kopieer de link van de vorm git@github.com:HoGentTIN/REPO_ NAAM-GEBRUIKERSNAAM.git. console cd Documents/Courses/EnterpriseLinux/ git clone git@github.com:HoGentTIN/REPONAAM-GEBRUIKERSNAAM.git Dit maakt een lokale kopie van de repository in een subdirectory. Je mag de naam van deze directory aanpassen en die verplaatsen, alles blijft gewoon werken. 5. Cre\u00eber een nieuwe branch met de naam solution om je eigen code en documentatie bij te houden. Verderop wordt duidelijk waarom dit belangrijk is. console git switch -c solution Open de directory in Visual Studio Code en open het bestand README.md . Vul bovenaan de gevraagde gegevens in (naam, klasgroep, enz.) en commit deze wijziging. Lees het README-bestand voor verdere instructies.","title":"Opzetten werkomgeving"},{"location":"intro/#errata","text":"Wanneer er errata in de opgave gepubliceerd worden, kan je die relatief eenvoudig binnen halen, maar enkel als je een eigen solution -branch aangemaakt hebt. Eerst moet je zorgen dat je updates kan binnenhalen van de repository met de opdracht. Het volgende commando zorgt dat je kan synchroniseren met die repository. Dit moet slechts \u00e9\u00e9n keer gebeuren. console git remote add upstream https://github.com/HoGentTIN/infra-labs.git Wanneer er nieuwe commits gebeurd zijn in de opgave, kan je de wijzigingen telkens zo ophalen: ```console git switch main git pull upstream main git switch solution git rebase main ``` De eerste twee regels zorgen er voor dat jouw versie van de main-branch up-to-date gebracht wordt met de nieuwe commits. In de derde regel ga je opnieuw naar je eigen branch. Voorlopig is er daar nog niets gewijzigd In de vierde regel, tenslotte, ga je de wijzigingen in de opgave op jouw eigen versie toepassen. Mogelijks komen er hier conflicten naar boven tussen bepaalde bestanden in de opgave en jouw wijzigingen. De command-line Git client geeft goede instructies om deze conflicten op te lossen. Zie hieronder voor een voorbeeld. Deze procedure werkt niet als je geen branch voor je eigen oplossing gemaakt hebt. In dat geval haal je jezelf een hoop ellende op de hals... Als er conflicten optreden in bestanden, blijft Git in rebase-modus\u201d steken en kan je voorlopig niet verder werken. Voer eerst git status uit om een lijst te krijgen met alle betrokken bestanden. $ git status rebase in progress; onto e5bd2df You are currently rebasing branch 'master' on 'e5bd2df'. (fix conflicts and then run \u201dgit rebase --continue\u201d) (use \u201dgit rebase --skip\u201d to skip this patch) (use \u201dgit rebase --abort\u201d to check out the original branch) Unmerged paths: (use \u201dgit reset HEAD <file>...\u201d to unstage) (use \u201dgit add <file>...\u201d to mark resolution) both modified: README.md no changes added to commit (use \u201dgit add\u201d and/or \u201dgit commit -a\u201d) Open deze \u00e9\u00e9n voor \u00e9\u00e9n met je teksteditor en zoek naar de markeringen voor conflicten, bv. If you have questions, please <<<<<< HEAD open an issue ====== ask your question in IRC. >>>>>> main VSCode toont deze conflicten in een kleur zodat ze in het oog springen. Bewerk alle bestanden met conflicten en verbeter de code. Vervolgens voeg je alle aangepaste bestanden toe met git add . en kan je het rebase-proces verder zetten met git rebase --continue . Gebruik tussendoor regelmatig git status om te zien hoe ver je staat en welke commando\u2019s je nodig hebt om een stap verder te gaan.","title":"Errata"},{"location":"intro/#tips-voor-efficient-werken","text":"In deze sectie vind je enkele algemene richtlijnen die je helpen vlotter en effici\u00ebnter te werken. Voor je aan een labo-opdracht begint, bereid je je eerst voor door alle aangereikte studiematerialen te bestuderen: handleidingen, screencasts, ... \u201cVan buiten blokken\u201d is helemaal niet nodig, maar zorg er in elk geval voor dat je er in die mate vertrouwd bent, dat je snel gericht kan zoeken naar juiste, relevante informatie. Je vindt die via de bronvermeldingen in deze syllabus, of via de opgave. Open meerdere terminalvensters/consoles naast elkaar (TODO: figuur invoegen). Elke terminal krijgt zijn eigen functie, bijvoorbeeld: Vim editor (of VS Code/Sublime/Notepad/...in een apart venster); doorvoeren van wijzigingen aan de configuratie; ingelogd op VM, voor commando\u2019s; ingelogd op VM, voor tonen logbestanden. Werk stap voor stap. Schrijf niet teveel code ineens. Probeer eerst een minimaal werkende opstelling te verkrijgen en registreer meteen in Git. Maak minimale wijzigingen en test elke wijziging uit. Hoe groter en ingrijpender de wijzigingen, hoe meer kans op fouten en hoe moeilijker die te debuggen zijn. Zodra iets werkt, en je bent een stap verder, registreer je dit meteen in Git en geef je een duidelijke, beschrijvende commit-boodschap. Gebruik Git op de command-line. Bij de meeste Git commando\u2019s krijg je gedetailleerde uitleg over hoe je een stap verder moet gaan en ook hoe je de laatste stap kan ongedaan maken. Dit geeft op de duur een beter inzicht in hoe Git precies werkt dan je via een GUI kan krijgen. De meeste GUIs voor Git verbergen belangrijke details waardoor je niet goed kan begrijpen wat je aan het doen bent. Commit regelmatig wijzigingen in je code en probeer elke commit te beperken tot \u00e9\u00e9n enkele \u201creden\u201d om wijzigingen aan te brengen aan de bestaande code. Dit maakt de \u201cgeschiedenis\u201d van je project transparanter en maakt ook dat je makkelijker kan terugkeren naar een bepaalde stap wanneer je de mist in gaat. Maak backups van originele, ongewijzigde configuratiebestanden zodat je er op kan terugvallen als er iets misloopt. Soms heb je zodanig zitten \u201cprutsen\u201d dat je er niet meer in slaagt de service te laten werken. Gebruik vagrant destroy . Wanneer je veel manuele wijzigingen hebt aangebracht in een VM, ben je op de duur niet meer zeker dat die zich in de gewenste toestand bevindt. Of je kan door experimenteren de VM onbruikbaar gemaakt hebben. Door de VM te verwijderen en opnieuw op te bouwen (met vagrant up ) kan je opnieuw beginnen van een werkende versie (als je de vorige richtlijnen opvolgt, tenminste!). Ook wanneer je denkt klaar te zijn met een deelopdracht, genereer de VM nog eens helemaal opnieuw en voer alle acceptatietests uit (indien die voorzien zijn in de labo-opdracht).","title":"Tips voor effici\u00ebnt werken"},{"location":"intro/#bash-tips","text":"In deze sectie vind je een aantal tips voor het gebruik van de Bash-shell. In deze cursus maak je intensief gebruik van de shell, en het loont de moeite om Bash wat beter te leren kennen. Het zit immers vol met interessante features die je toelaten productiever te werken. Online is hier nog veel meer over te vinden (Rowe, 2009). De tips hier gelden ook voor Windows- en MacOS-gebruikers! Windows-gebruikers hebben beschikking over een recente versie van Bash via Git (Git Bash). In MacOS X zit ook een Bash-shell, weliswaar een zeer oude versie. Je kan een recente versie installeren via HomeBrew. Gebruik TAB-completion. Je kan een deel van een commando of pad intikken en dan de TAB-toets indrukken. Indien mogelijk zal Bash het woord vervolledigen, of mogelijke alternatieven tonen. Als je de package bash-completion installeert zijn er nog veel meer mogelijkheden. Gebruik de command-history. Bash houdt de commando\u2019s die je eerder gebruikt hebt bij. Met de pijltjestoetsen kan je eerdere commando\u2019s terug halen. Gebruik Ctrl-R om te zoeken in de command history. Je kan dan een fragment van het commando intikken, Bash toont dan het laatste commando waar dat tekstfragment in voorkomt. Bang-bang!! In Bash zijn er enkele shortcuts voorzien voor (delen van) het vorige commando. !! staat voor het gehele vorige commando, !$ voor het laatste argument en !* voor alle argumenten. Een voorbeeldje van het gebruik: $ dnf update You need to be root to perform this command. $ sudo !! sudo dnf update [...] $ mkdir -p some/long/path/i/dont/want/to/repeat $ cd !$ cd some/long/path/i/dont/want/to/repeat $ Toetsenbordcombinaties. Naast Ctrl-R van hierboven zijn er nog een aantal nuttige toetsenbordcombinaties. Ctrl-C onderbreekt het huidige proces Ctrl-Z pauzeert het huidige proces (haal het terug met fg) Ctrl-D sluit de shell af (enkel op lege regel) Ctrl-K verwijdert de tekst rechts van de cursor Ctrl-U verwijdert de tekst links van de cursor Ctrl-T verwisselt letterteken onder de cursor met dat voor de cursor Alt-T verwisselt woord voor met woord na de cursor Er bestaan nog veel meer combinaties. Deze kan je vinden in de man-pagina bash(1) in de sectie READLINE (subsectie Readline Command Names en volgende). Personaliseer de shell. Je kan het gedrag van de shell in hoge mate aan je eigen wensen aanpassen door het bestand ~/.bashrc aan te passen. Je kan het gedrag van tab-completion of de command history aanpassen, een eigen commandoprompt instellen, aliassen (zie verder) of functies defini\u00ebren, enz. Het zou ons te ver leiden om alle mogelijkheden uit te diepen, maar je kan een relatief eenvoudig voorbeeld vinden in https://github.com/bertvv/server-dotfiles/ (installatie-instructies te vinden in de README), en een meer uitgebreid voorbeeld in https://github.com/bertvv/dotfiles/ (of gelijknamige reposi- tories van andere Github-gebruikers). Aliassen zijn een soort shortcuts voor commando\u2019s die je vaak gebruikt. Dit kan enorm veel typwerk besparen. Je kan ze toevoegen in je ~/.bashrc . Enkele voorbeelden ter inspiratie: alias l='ls -l --si --time-style=long-iso --color' alias a='git add' alias c='git commit -m' alias h='git log --pretty=\u201dformat:%C(yellow)%h %C(blue)%ad %C(reset)%sC(red)%d %C(green)%an%C(reset), %C(cyan)%ar\" --date=short --graph --all' alias s='git status' alias vu='vagrant up' alias vD='vagrant destroy' alias infra='cd /home/bert/Documents/Courses/InfraAutomation/21-22' Nog meer voorbeelden vind je in https://github.com/bertvv/dotfiles/blob/master/.bash.d/aliases.sh . Voor meer complexere shortcuts is alias minder geschikt, maar daarvoor kan je in .bashrc een functie defini\u00ebren, bv. # Usage: dip CONTAINER # This function will get the IP-address of the specified Docker container dip() { docker container inspect \"${1}\" | jq '.[]|.NetworkSettings.Networks|.[]|.IPAddress' }","title":"Bash tips"},{"location":"intro/#vagrant","text":"Vagrant is een command line tool die het aanmaken en configureren van virtuele machines automatiseert. Het ondersteunt een aantal virtualisatieplatforms, o.a. VirtualBox, Hyper-V, libvirt, enz. Wij zullen het gebruiken in combinatie met VirtualBox. Je Git repository bevat een aantal Vagrant-omgevingen voor het opzetten van de VMs voor je labo-opdrachten. Je kan een overzicht van de VMs opvragen met vagrant status . Dit commando moet uitgevoerd worden in een directory waar een Vagrantfile te vinden is. In dat geval ziet de uitvoer er bijvoorbeeld zo uit: $ vagrant status Current machine states: srv001 not created (virtualbox) The environment has not yet been created. Run `vagrant up` to create the environment. If a machine is not created, only the default provider will be shown. So if a provider is not listed, then the machine is not created for that environment. $ Deze omgeving bevat \u00e9\u00e9n virtuele machine met naam srv001 . Deze VM kan opgestart worden met vagrant up srv001 . De eerste keer dat je dit doet wordt er een basis-VM gedownload met een minimale Linux-installatie. Doe dit best op een performant netwerk, bv. het bekabelde netwerk op de campus of thuis/op kot, en niet via WiFi. Deze \u201cbase box\u201d wordt bijgehouden en zal telkens dienst doen als basis voor het opzetten van alle hosts in onze opstelling. Het downloaden gebeurt dus slechts \u00e9\u00e9n keer. Na opstarten kan je inloggen met vagrant ssh srv001 . Je bent ingelogd als gebruiker vagrant en kan commando\u2019s uitvoeren met root-rechten door er sudo voor te plaatsen (geen wachtwoord vereist). Als het nodig mocht zijn: het wachtwoord van de gebruikers vagrant en root is telkens vagrant . Als je ls / uitvoert, zal je merken dat er een directory /vagrant bestaat. Dit is je lokale repository op je fysieke systeem die gemount is binnen de VM. Dit is een eenvoudige manier om bestanden te delen tussen VM en het fysieke systeem. Let er op dat je VMs niet meer vanuit je VirtualBox GUI opstart of bewerkt. Doe dit nu enkel met Vagrant en vanuit een terminal. Het commando vagrant moet altijd uitgevoerd worden vanuit de directory waar het bestand Vagrantfile zich bevindt. De belangrijkste Vagrant commando\u2019s worden opgesomd in de tabel hieronder. Daar waar [VM] tussen rechte haken staat, is dat een optioneel argument. Als je het weglaat, wordt de actie op alle VMs tegelijk uitgevoerd. Commando Functie vagrant status Geef een overzicht van de Vagrant omgeving vagrant up [VM] Start VM op vagrant provision [VM] Voer het configuratiescript voor VM uit vagrant ssh VM Log in op VM als gebruiker vagrant vagrant halt [VM] Zet VM uit vagrant reload [VM] Herstart VM vagrant destroy [VM] Vernietig VM","title":"Vagrant"},{"location":"intro/#markdown","text":"Markdown is een syntax die toelaat om geformatteerde tekst in een eenvoudige platte tekstformaat te schrijven en deze vervolgens om te zetten naar HTML (zodat je het kan bekijken in de webbrowser), PDF (om af te drukken), LaTeX, enz. Markdown is de standaard geworden voor het schrijven van handleidingen en documentatie op Github . Je labo-verslagen en documentatie moeten ook in Markdown geschreven worden. Dit heeft een aantal voordelen: omdat Markdown tekstgebaseerd is, kan het in een versiebeheersysteem opgeslagen worden. Met Word-documenten gaat dit niet (Git is niet geschikt om wijzigingen in binaire bestanden te traceren). Een verzameling tekstbestanden is ook makkelijker te doorzoeken dan een verzameling Word-documenten, bijvoorbeeld met een tool als The Silver Searcher . Leer tekst correct opmaken met Markdown. Dit is heel eenvoudig te leren en kost weinig inspanning. Maar als je je niet houdt aan enkele basisregels, wordt je tekst niet correct omgezet naar HTML met een moeilijk leesbaar verslag als gevolg. Goede teksteditors bieden ondersteuning voor Markdown en kunnen je een preview laten zien van hoe het bestand er in HTML zou uitzien. Er bestaan VSCode plugins die de basis-ondersteuning uitbreidt met enkele features die je productiviteit verhogen. Markdown All in One (door Yu Zhang) en markdownlint (door David Anson) zijn de interessantste: Shortcut Ctrl+Shift+V toont een preview van het bestand met opmaak Shortcut Alt+Shift+F (Linux: Ctrl+Shift+I ) formatteert tabellen zodat de verticale lijnen altijd mooi uitgelijnd zijn. Opmaak van wiskundige formules in LaTeX-notatie Markdownlint toont fouten in je Markdown-code aan de hand van een gekleurde golvende lijnt onder de tekst (zoals een spell-checker) en vat ze onderaan in het \"Problems\"-paneel samen in een lijst. Met deze hulpmiddelen is het eenvoudig om Markdown correct te gebruiken en een mooi opgemaakte HTML-pagina te krijgen als je je verslagen naar Github pusht.","title":"Markdown"},{"location":"troubleshooting/","text":"Troubleshooting TODO: intro, motivatie Bottom-up troubleshooting Wanneer je problemen met een netwerkservice moet troubleshooten is het essentieel om een systematische en grondige benadering te volgen. Als model voor een systematische aanpak gebruiken we hier de TCP/IP protocolstack. We doorlopen die van de onderste laag naar boven en controleren op elke laag alle nodige instellingen. Het is belangrijk om deze volgorde aan te houden en geen stappen over te slaan. Als een netwerkdienst niet beschikbaar is voor gebruikers heeft het geen zin om de firewall-configuratie te controleren, als er een probleem is met de routering naar de server. Laag Protocols Sleutelwoorden Applicatielaag HTTP, DNS, SMB, FTP, SSH, ... Transportlaag TCP, UDP sockets, poorten Internetlaag IP, ICMP routering, IP-adressering Netwerktoegangslaag Ethernet switch, MAC-adressering Fysieke laag UTP-kabel Enkele algemene richtlijnen Voor we de nodige controles op elke laag overlopen, eerst enkele algemene best-practices: Stel een checklist samen en houd deze up-to-date terwijl je meer ervaring opdoet. Dit is belangrijk! De kan is klein dat je elk commando uit het hoofd kent en als je met netwerkproblemen te kampen hebt, kan je niet gaan Googlen... Wees systematisch en volg dezelfde stappen in de juiste volgorde. Wees grondig , en sla geen stappen over (bijvoorbeeld het controleren van de kabels), tenzij bewezen is dat alles op dat niveau werkt zoals verwacht. Werk in kleine stappen en controleer bij elke wijziging of deze het verwachte resultaat oplevert. Maak geen veronderstellingen . Controleer. Bewaar een reservekopie van originele configuratiebestanden en de laatste \"werkende\" versie. Valideer altijd de syntaxis van configuratiebestanden voordat je ze toepast. Controleer de (juiste) systeemlogbestanden . Leer jezelf aan hoe je effici\u00ebnt moet zoeken in de systeemlogs. Open een aparte terminal die de logs in realtime toont (bijvoorbeeld journalctl -f) Automatiseer je tests (met een Shell-script, BATS-testscript , Ansible-playbook, Serverspec, etc.) Foutmeldingen geven meestal een idee van waar je moet zoeken en kunnen een snelkoppeling zijn in het probleemoplossingsproces. Zoek naar de foutmelding in de logboeken of gegenereerd door clientsoftware en weet hoe je deze moet interpreteren. u En tenslotte: Stop met pingen naar www.google.com! Dit is geen goede test, want je hebt er niets aan als dit niet lukt. Er moeten teveel voorwaarden vervuld zijn eer dit commando kan slagen. Fysieke en netwerktoegangslaag In deze fase controleren we de netwerkhardware, met name netwerkkabels en poorten. Staat de stroom aan? Is de netwerkkabel aangesloten? Ga in VirtualBox naar de VM-instellingen, Netwerk, selecteer de actieve interfaces, klik op \"Geavanceerd\" en zorg ervoor dat het selectievakje \"Kabel aangesloten\" is aangevinkt. Gebruik bij een fysieke UTP-kabel een kabeltester om te controleren of deze goed werkt Branden de LED's van de Ethernet-poort, zowel op de machine als op de switch? Zo niet, test dan de kabel Sommige schakelaars hebben een andere kleur voor b.v. FastEthernet (100 Mbps) en Gigabit Ethernet. Controleer of je de verwachte kleur ziet. Gebruik het commando ip-link UP: ok, de interface is aangesloten NO-CARRIER: geen signaal op deze interface Kabel is correct aangesloten: $ ip link 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: enp0s31f6: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000 link/ether 20:2f:b9:f1:cc:84 brd ff:ff:ff:ff:ff:ff Kabel is niet correct aangesloten: $ ip l 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: enp0s31f6: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc fq_codel state DOWN mode DEFAULT group default qlen 1000 link/ether 20:2f:b9:f1:cc:84 brd ff:ff:ff:ff:ff:ff Internetlaag De internetlaag is verantwoordelijk voor het routeren van netwerkverkeer tussen hosts op het netwerk. Normaal krijgt een apparaat dat aansluit op een lokaal netwerk automatisch instellingen toegekend van een DHCP-server. Servers hebben soms een vast IP-adres en daar moet je dan toch deze instellingen controleren. Werk altijd in deze volgorde: Controleer de lokale netwerkinstellingen op het apparaat Controleer routering binnen het lokaal netwerk Controleer routering naar het internet Lokale netwerkinstellingen Om te kunnen communiceren, moet elke host drie instellingen correct hebben geconfigureerd: Aan de netwerkinterface moet een IP-adres zijn toegewezen Er moet een standaardgateway zijn ingesteld Er moet een DNS-server zijn ingesteld Het IP-adres kan automatisch (DHCP) of handmatig zijn ingesteld. Controleer dit in /etc/sysconfig/network-scripts/ifcfg-IFACE (met IFACE de naam van de netwerkinterface). Dit is een fragment uit een netwerkinterfaceconfiguratiebestand dat is geconfigureerd om DHCP te gebruiken: DEVICE=\"enp0s3\" ONBOOT=\"yes\" BOOTPROTO=\"dhcp\" Dingen om te controleren: DEVICE moet de interfacenaam zijn ONBOOT moet yes zijn, anders zal het systeem niet proberen de interface te activeren bij het opstarten of bij het herstarten van de netwerkinterfaces ( systemctl restart network ) BOOTPROTO moet zijn ingesteld op dhcp Als er een vast IP-adres is ingesteld, kan de configuratie er als volgt uit zien: DEVICE=enp0s8 ONBOOT=yes BOOTPROTO=none IPADDR=192.168.56.24 NETMASK=255.255.255.0 DEVICE en ONBOOT zijn ingesteld zoals in het vorige voorbeeld BOOTPROTO zou none moeten zijn IPADDR en NETMASK moeten gespecifieerd zijn IP-adres controleren Gebruik ip address (of de korte versie ip a ) om de IP-adressen voor elke interface weer te geven. Je moet de verwachte waarde kennen! Indien je het exacte IP-adres kent moet je in ieder geval weten wat het netwerkbereik of netwerk-IP en netwerkmasker is van het LAN waarin de host zich bevindt. Veel thuisrouters hebben een IP-bereik van 192.168.0.0/24 of 192.168.1.0/24 Op een VirtualBox NAT-interface moet het IP-adres van de VM 10.0.2.15/24 zijn. Let hier op het netwerkasker! Normaal is dat /8 voor dit IP-adres! Op een VirtualBox host-only interface hangt het IP-adres van de VM af van hoe je dit netwerk hebt geconfigureerd. Het standaard host-only netwerk heeft IP-bereik 192.168.56.0/24, met een DHCP-server die adressen uitdeelt vanaf 192.168.56.101 t/m 192.168.56.254. Mogelijke problemen en oorzaken (in geval van automatische IP-toewijzing met DHCP): Geen IP: De DHCP-server is onbereikbaar De DHCP-server geeft geen IP aan deze host (bv. als gewerkt wordt met gereserveerde IP-adressen op basis van MAC-adres) Het IP-adres ziet eruit als 169.254.x.x Er kon geen DHCP-server worden bereikt en er werd een \"link-local\"-adres toegewezen (typisch voor Windows-systemen) Het IP-adres niet in het verwachte bereik Mogelijk heb je voordien per ongeluk een vast IP-adres ingesteld en ben je vergeten het opnieuw op DHCP in te stellen... Misschien is de DHCP-server verkeerd ingesteld Mogelijke problemen en oorzaken (in geval van handmatige IP-instelling): Het IP-adres ligt niet in het verwachte bereik Fout bij toewijzing van het IP-adres, controleer het configuratiebestand Correct IP-adres, maar je krijgt de foutboodschap \"network unreachable\" Controleer het netwerkmasker, dit moet identiek zijn voor alle hosts op het LAN! Default Gateway Gewoonlijk is een host via een switch verbonden met een LAN. Netwerkverkeer naar de buitenwereld gaat via een router, aangesloten op hetzelfde LAN. Elke host op het LAN zou deze router, de \"default gateway\", moeten kennen. Gebruik het commando ip route (of korte versie ip r ). Er zou een regel moeten zijn die begint met default via x.y.z.w . Mogelijke problemen en oorzaken (in geval van automatische IP-toewijzing met DHCP): Er is geen standaard gateway ingesteld er is hoogstwaarschijnlijk ook een probleem met het IP-adres van deze host, los dit eerst op Als je de DHCP-server beheert, is deze misschien slecht geconfigureerd? Onverwacht standaard gateway-adres Mogelijk heb je de standaardgateway eerder handmatig ingesteld en ben je vergeten deze opnieuw op DHCP in te stellen Als je de DHCP-server beheert, is deze misschien slecht geconfigureerd? DNS-server Om het Internet te kunnen gebruiken, heeft elke host toegang nodig tot een DNS-server om de IP-adressen die bij hostnamen (bv. www.hogent.be) horen te kunnen opzoeken. Bekijk het bestand /etc/resolv.conf . Het heeft meestal een header die vermeldt dat het automatisch is gegenereerd, en zou een of meer regels moeten hebben die beginnen met nameserver . $ cat /etc/resolv.conf # Generated by NetworkManager zoek hogent.be naamserver 193.190.173.1 naamserver 193.190.173.2 Voor elke hostnaam die je vanop deze machine wil bereiken, zal het systeem een query sturen naar \u00e9\u00e9n van de opgegeven nameservers om het IP-adres op te vragen. Op recente versies van enkele Linux-distributies (bv. Ubuntu, Fedora) zal je het volgende zien: $ cat /etc/resolv.conf # This file is managed by man:systemd-resolved(8). Do not edit. [...] nameserver 127.0.0.53 Dan is systemd-resolved ge\u00efnstalleerd. Die simuleert zelf het gedrag van een DNS-server die antwoordt op DNS-queries. systemd-resolved zal dan de vraag doorgeven aan een externe DNS-server. Welke dat is kan je opvragen met resolvectl : $ resolvectl Global Protocols: LLMNR=resolve -mDNS -DNSOverTLS DNSSEC=no/unsupported resolv.conf mode: stub Link 2 (enp0s31f6) Current Scopes: DNS LLMNR/IPv4 LLMNR/IPv6 Protocols: +DefaultRoute +LLMNR -mDNS -DNSOverTLS DNSSEC=no/unsupported Current DNS Server: 192.168.0.1 DNS Servers: 192.168.0.1 In dit voorbeeld is dat 192.168.0.1, wellicht een thuisrouter die ook dienst doet als DNS forwarder. Controleer routering binnen het LAN Als de hierboven opgesomde instellingen correct zijn, kan je controleren of andere hosts op het LAN bereikbaar zijn. Ping de standaard gateway: ping a.b.c.d Ping een andere bekende host op het LAN Als dit werkt kan je proberen een host buiten het LAN te pingen Houd er rekening mee dat ping (en andere hulpprogramma's voor het oplossen van netwerkproblemen zoals de traceroute -familie) niet altijd werken. Sommige systeembeheerders zullen ICMP-verkeer op routers blokkeren, waardoor de resultaten onbruikbaar worden. Een commando als ping www.google.com (voor sommigen het eerste commando dat ze proberen in geval van netwerkverbindingsproblemen) is niet erg geschikt, omdat het van te veel dingen tegelijk afhangt: de netwerkinstellingen van de host moeten correct zijn routering zou moeten werken DNS zou beschikbaar moeten zijn geen enkele router tussen deze host en het doel mag ICMP blokkeren enz. Een Windows-systeem kan ook ICMP-verkeer blokkeren (inclusief ping ). Zorg ervoor dat je de firewall-instellingen controleert en indien nodig dit type netwerkverkeer toestaat. De volgende PowerShell-oneliner doet precies dat: Get-NetFirewallRule -DisplayName \"*Echo Request*\" | Set-NetFirewallRule -enabled true Controleer beschikbaarheid van de DNS service Het is niet omdat er een DNS-server geconfigureerd is in /etc/resolv.conf of via systemd-resolved dat deze ook beschikbaar is voor clients en antwoordt op requests. Je kan controleren of de DNS-service beschikbaar is met nslookup (dit commando ken je allicht van Windows), dig of getent ahosts . $ nslookup www.hogent.be Server: 127.0.0.53 Address: 127.0.0.53#53 Non-authoritative answer: www.hogent.be canonical name = hogent.be. Name: hogent.be Address: 193.190.173.132 In dit voorbeeld stuurt nslookup de query naar de DNS-server gespecifieerd in /etc/resolv.conf . Je kan ook een specifieke DNS-server ondervragen: $ nslookup www.hogent.be 9.9.9.9 Server: 9.9.9.9 Address: 9.9.9.9#53 Non-authoritative answer: www.hogent.be canonical name = hogent.be. Name: hogent.be Address: 193.190.173.132 Het commando dig is veel uitgebreider en hier kan je ook andere types DNS-queries uitvoeren (NS, MX, AXFR, enz.): $ dig www.hogent.be @9.9.9.9 +short hogent.be. 193.190.173.132 Hiermee vraag je het IP-adres van www.hogent.be aan DNS-server 9.9.9.9 en drukt het resultaat in een bondige vorm af. Als je +short weglaat krijg je meer informatie te zien. Zie het onderdeel BIND troubleshooting voor meer info. Op servers en systemen met een minimale installatie, is het commando nslookup of dig misschien niet ge\u00efnstalleerd. Als je met netwerkproblemen te kampen hebt, kan je het ook niet gauw installeren (en nieuwe software installeren op een productieserver is sowieso geen goed idee). In dat geval kan je gebruik maken van getent ahosts : $ getent ahosts www.hogent.be 193.190.173.132 STREAM hogent.be 193.190.173.132 DGRAM 193.190.173.132 RAW Het nadeel van dit commando is dat je er enkel de in /etc/resolv.conf gespecifieerde DNS-server kan ondervragen, maar dat is natuurlijk beter dan niets. Wanneer de DNS-server niet gespecifieerd is, of niet antwoordt op queries, kan je dezelfde zaken controleren als bij de default gateway. Routering buiten het LAN Als binnen het lokale netwerk routering en DNS in orde zijn, kan je proberen om te pingen naar een host buiten het LAN. Begin met een host die zich nog relatief kort bij bevindt, en eventueel op IP-adres in plaats van op hostnaam. Een andere nuttige test is: $ curl icanhazip.com Curl is een command-line tool om te interageren met een webserver. De website https://icanhazip.com was oorspronkelijk een hobbyproject van systeembeheerder Major Hayden en wordt nu onderhouden door Cloudflare . De website is heel eenvoudig en bevat zelfs geen HTML, maar toont enkel het publieke IP-adres van waar jij de pagina hebt opgevraagd. Op die manier controleer je ook of je Internettoegang hebt, of web-verkeer doorgelaten wordt en wat het publieke IP-adres is van het netwerk waar je je bevindt. Transportlaag In de transportlaag controleren we volgende zaken: Draait de service? Luistert de service op het juiste poortnummer? Is de firewall correct geconfigureerd? We geven hier het voorbeeld van een webserver, maar je kan dit toepassen op elke service. Draait de service? Gebruik hiervoor het commando systemctl status . We verwachten ergens in de uitvoer \"active (running)\" te zien. $ systemctl status httpd \u25cf httpd.service - The Apache HTTP Server Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled) Active: inactive (dead) Docs: man:httpd.service(8) In dit geval is de (Apache) webserver uitgeschakeld. We zien hier ook dat de service \"disabled\" is, wat betekent dat deze niet wordt opgestart bij het booten. Dit kan je oplossen met sudo systemctl enable httpd . We starten de service nu op en controleren het resultaat: $ sudo systemctl start httpd [sudo] password for user: $ systemctl status httpd \u25cf httpd.service - The Apache HTTP Server Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled) Active: active (running) since Fri 2021-06-25 21:46:10 CEST; 2s ago Docs: man:httpd.service(8) Main PID: 932880 (httpd) Status: \"Started, listening on: port 80\" Tasks: 213 (limit: 18723) Memory: 23.3M CPU: 100ms CGroup: /system.slice/httpd.service \u251c\u2500932880 /usr/sbin/httpd -DFOREGROUND \u251c\u2500932881 /usr/sbin/httpd -DFOREGROUND \u251c\u2500932883 /usr/sbin/httpd -DFOREGROUND \u251c\u2500932884 /usr/sbin/httpd -DFOREGROUND \u2514\u2500932885 /usr/sbin/httpd -DFOREGROUND jun 25 21:46:09 nb1100380 systemd[1]: Starting The Apache HTTP Server... jun 25 21:46:09 nb1100380 httpd[932880]: AH00558: httpd: Could not reliably determine the server's fully qualified domain nam> jun 25 21:46:10 nb1100380 httpd[932880]: Server configured, listening on: port 80 jun 25 21:46:10 nb1100380 systemd[1]: Started The Apache HTTP Server. Nu is de Apache server wel actief. Juiste poortnummers Gebruik het commando ss -tln of sudo ss -tlnp (Show Sockets) om te controleren welke TCP-services (optie -t ) op dit moment een open server-socket ( -l ) in gebruik hebben. Met de optie -n toon je de poortnummers in plaats van de service-naam (zoals gespecifieerd in /etc/services ). De optie -p toont welk proces er luistert op deze server-socket, maar daar heb je root-rechten voor nodig (vandaar de sudo ). Voor services die gebaseerd zijn op UDP geef je de optie -u in plaats van -t . $ ss -tln State Recv-Q Send-Q Local Address:Port Peer Address:Port Process LISTEN 0 4096 0.0.0.0:5355 0.0.0.0:* LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* LISTEN 0 128 0.0.0.0:22 0.0.0.0:* LISTEN 0 4096 [::]:5355 [::]:* LISTEN 0 511 *:80 *:* LISTEN 0 128 [::]:22 [::]:* Vooral de kolom Local Address:Port is nuttig. \"Local Address\" geeft aan op welke netwerkinterface de service aan het luisteren is: 127.0.0.1: enkel op de loopback-interface 0.0.0.0 of *: op alle interfaces [::]: op alle interfaces (IPv6) Als er een specifiek IP-adres opgegeven wordt, dan luistert de service enkel op de netwerkinterface met dat IP-adres Verder moet je weten op welke poort je verwacht dat de service aan het luisteren is. Voor een webserver is dat typisch poort 80 (HTTP) en 443 (HTTPS). Poort 22 wordt normaal gebruikt door de Secure Shell daemon ( sshd ) en poort 53 door een DNS-server (in dit geval systemd-resolved , die ook poort 5353 gebruikt). Om zeker te zijn dat dit klopt, vragen we best ook de processen op: $ sudo ss -tlnp State Recv-Q Send-Q Local Address:Port Peer Address:Port Process LISTEN 0 4096 0.0.0.0:5355 0.0.0.0:* users:((\"systemd-resolve\",pid=704,fd=12)) LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* users:((\"systemd-resolve\",pid=704,fd=17)) LISTEN 0 128 0.0.0.0:22 0.0.0.0:* users:((\"sshd\",pid=760464,fd=5)) LISTEN 0 4096 [::]:5355 [::]:* users:((\"systemd-resolve\",pid=704,fd=14)) LISTEN 0 511 *:80 *:* users:((\"httpd\",pid=932885,fd=4),(\"httpd\",pid=932884,fd=4),(\"httpd\",pid=932883,fd=4),(\"httpd\",pid=932880,fd=4)) LISTEN 0 128 [::]:22 [::]:* users:((\"sshd\",pid=760464,fd=7)) Als de service opgestart is, maar niet op het juiste poortnummer luistert, dan zal die ook niet beschikbaar zijn voor clients. Meestal moet je het poortnummer specifi\u00ebren in het configuratiebestand voor die service. Controleer dit, herstart de service na de nodige aanpassingen en controleer opnieuw met sudo ss -tlnp . Firewall-instellingen Laat de firewall netwerkverkeer door naar de service? Controleer dit met firewall-ctl : $ sudo firewall-cmd --list-all public (default, active) interfaces: enp0s3 enp0s8 sources: services: dhcpv6-client mdns samba-client ssh http https ports: masquerade: no forward-ports: icmp-blocks: rich rules: In dit geval zijn de services http en https bereikbaar. De services dhcpv6-client mdns samba-client staan op Fedora/RedHat altijd aan. Voor een server is ssh ook belangrijk en dit moet dus ook meestal aan staan. Controleer steeds of: De netwerkinterface waarop de service luistert wordt vermeld in de lijn die begint met interfaces: De servicenaam wordt weergegeven. De waarde moet er een zijn die wordt vermeld door firewall-cmd --get-services . Merk op dat de servicenaam voor firewalld niet noodzakelijk gelijk is aan de systemd servicenaam. Bijv. de BIND service heet named.service , terwijl er in de firewall-instellingen naar wordt verwezen met dns . Als de servicenaam niet voorkomt in de uitvoer van firewalld --get-services , moeten de poortnummers en transportprotocol die door de service worden gebruikt worden vermeld (bijvoorbeeld bij gebruik van een niet-standaard poort of een service die niet bekend is onder 'firewalld'). Voeg zo nodig de service toe aan de firewall-configuratie en herstart: $ sudo firewall-cmd --add-service=http --permanent success $ sudo firewall-cmd --add-service=https --permanent success $ sudo firewall-cmd --reload success Vergeet hier de optie --permanent niet! Als je die weglaat, wordt de wijziging onmiddellijk doorgevoerd (wat op het eerste zicht is wat je wilt), maar na rebooten van het systeem of herstarten van de firewalld.service , zal deze tijdelijke wijziging ongedaan gemaakt worden en heb je terug de foute instellingen! Als je een poortnummer moet specifi\u00ebren gebruik je volgende notatie: $ sudo firewall-cmd --add-port=9000/tcp --permanent success $ sudo firewall-cmd --reload success Controleer na een wijziging altijd of de firewall-regels nu correct zijn! TODO: kadertekstje over verwarring bij de uitspraak \"open poorten\". Applicatielaag Specifieke zaken waar je moet op letten in deze laag hangen voor een groot stuk af van de service die je aan het configureren/troubleshooten bent. Apache, nginx, BIND, Vsftpd, Postfix, enz. hebben allemaal een eigen structuur en configuratie met onderling grote verschillen. Je moet de service in kwestie dus goed leren kennen! Er zijn echter wel enkele algemene zaken die je in elke situatie kan controleren: De systeemlogs kunnen foutboodschappen bevatten die een indicatie zijn voor de oorzaak van het probleem. De meeste services hebben een tool waarmee je de syntax van het configuratiebestand kan controleren. De service moet beschikbaar zijn voor clients en antwoorden op requests/queries. Systeemlogbestanden Controleer systeemlogs met journalctl of door het logbestand voor de service op te zoeken in /var/log . Alle systeemlogs die beheerd worden door systemd-journald kan je met dat eerste commando opvragen. Sommige applicaties worden niet beheerd of herkend door systemd-journald en die houden hun logs bij als een tekstbestand (in de directory /var/log ). Het is nuttig om tijdens het hele troubleshooting-proces een aparte terminal te openen en daarin de relevante logs te openen. In de voorbeelden hieronder zorgt de optie -f (kort voor --follow ) er voor dat het commando wacht op nieuwe log-events en die meteen toont wanneer die zich voordoen. Op die manier kan je meteen het effect zien van commando's, configuratiewijzigingen of andere handelingen die je op het systeem uitvoert. sudo journalctl -f : toont alle systeemlog-events die door systemd-journald ontvangen worden. sudo journalctl -f -u httpd.service : zal enkel de logs van de Apache server tonen. sudo tail -f /var/log/httpd/error_log : toont de inhoud van het tekstbestand error_log , waar soms foutboodschappen in terecht komen die je niet ziet met journalctl , zoals bijvoorbeeld de foutboodschappen van een PHP-applicatie. Configuratiebestanden Controleer het configuratiebestand dat zich ergens in de directory /etc/ moet bevinden. Voor Apache is dat bv. /etc/httpd/httpd.conf . Maak eerst een backup van de huidige toestand van het configuratiebestand voordat je wijzigingen aanbrengt! Valideer de syntaxis van het configuratiebestand, als dit voorzien is door de service. Apache: apachectl configtest BIND: named-checkconf en named-checkzone Samba: testparm Vsftpd: vsftpd -olisten=NO enz. Verbeter waar nodig fouten in het configuratiebestand en herstart daarna de service, bv: sudo systemctl restart httpd.service . Controleer in de logs of er nieuwe of andere foutboodschappen verschijnen Controleer of de service nu wel draait (zie Transportlaag) Beschikbaarheid voor clients Als we alle voorgaande stappen doorlopen hebben, en eventuele fouten weggewerkt hebben, dan mogen we op dit punt verwachten dat de service nu correct werkt en beschikbaar is voor clients. We kunnen dit soms op de server zelf controleren (via de loopback-interface), maar het is belangrijk om dit over het netwerk te doen. Zo komen soms nog onverwachte problemen naar boven. Netwerkverkeer op de loopback-interface wordt bijvoorbeeld nooit tegengehouden door de firewall, terwijl dat via fysieke interfaces wel kan gebeuren. Naast het gebruiken van de normale client-software om de service aan te spreken (bv. een webbrowser), zijn er nog enkele andere tools die van pas kunnen komen bij het onderzoeken van de interactie tussen clients en de service. Je kan een portscan uitvoeren met nmap om te controleren of de serverpoort bereikbaar is, bv. sudo nmap -sS -p 80,443 192.168.56.24 : voer een TCP SYN scan uit op poorten 80 en 443 Gebruik een commandline-tool of test-commando om de service te ondervragen. Dit soort tools geven vaak betere foutboodschappen om de oorzaak van problemen te achterhalen dan de \"normale\" client-software voor gewone gebruikers. Voorbeelden: Webservice: wget http://192.168.56.24/ , curl https://192.168.56.24/ Samba: nmblookup server , smbclient -Uuser%password //server/share FTP: ftp server of curl --user user:password ftp://server/path/to/file DNS: dig DHCP: nmap heeft een script waarmee je dit kan testen Soms is het nuttig om een packet sniffer zoals Tcpdump of Wireshark te gebruiken om de netwerktrafiek tussen clients en de service te bestuderen. Tegenwoordig is veel netwerkverkeer ge\u00ebncrypteerd, dus de kans bestaat dat dit niet veel nuttige informatie oplevert. Troubleshooting tips voor specifieke services en situaties BIND TODO VirtualBox netwerkinstellingen TODO TL;DR checklist Hieronder vind je een overzicht van de belangrijkste zaken die je moet controleren, en de commando's die je daarvoor kan gebruiken. Fysieke en netwerktoegangslaag Controleer of de kabels goed aangesloten zijn Controleer of de kabel nog goed werkt Controleer de LEDs van de switchpoort Is de machine verbonden met de juiste switch? Krijgt de machine een signaal op de kabel? ip link Internetlaag Controleer eerst lokale netwerkinstellingen IP adres ( ip a ) default gateway ( ip r ) DNS ( cat /etc/resolv.conf of resolvectl ) Routering binnen het LAN ping naar de gateway en naar andere gekende hosts op het LAN controleer beschikbaarheid van DNS ( nslookup , dig , getent ahosts ) Routering naar het internet ping een gekende host buiten het LAN (let er op dat sommige routers ICMP-verkeer blokkeren en pingen naar buiten in dit geval niet werkt) Transportlaag Is de service opgestart? systemctl status Luistert de service op de juiste netwerkinterface en poortnummer? sudo ss -tlnp Laat de firewall netwerkverkeer naar de service door? sudo firewall-cmd --list-all Applicatielaag Controleer systeemlogs: sudo journalctl -f -u SERVICE , tail -f /var/log/LOG_FILE Gebruik command-line tools om de service aan te spreken ( curl , smbclient , dig , ...) Controleer of de service beschikbaar is over het netwerk ( nmap , wireshark , ...)","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"TODO: intro, motivatie","title":"Troubleshooting"},{"location":"troubleshooting/#bottom-up-troubleshooting","text":"Wanneer je problemen met een netwerkservice moet troubleshooten is het essentieel om een systematische en grondige benadering te volgen. Als model voor een systematische aanpak gebruiken we hier de TCP/IP protocolstack. We doorlopen die van de onderste laag naar boven en controleren op elke laag alle nodige instellingen. Het is belangrijk om deze volgorde aan te houden en geen stappen over te slaan. Als een netwerkdienst niet beschikbaar is voor gebruikers heeft het geen zin om de firewall-configuratie te controleren, als er een probleem is met de routering naar de server. Laag Protocols Sleutelwoorden Applicatielaag HTTP, DNS, SMB, FTP, SSH, ... Transportlaag TCP, UDP sockets, poorten Internetlaag IP, ICMP routering, IP-adressering Netwerktoegangslaag Ethernet switch, MAC-adressering Fysieke laag UTP-kabel","title":"Bottom-up troubleshooting"},{"location":"troubleshooting/#enkele-algemene-richtlijnen","text":"Voor we de nodige controles op elke laag overlopen, eerst enkele algemene best-practices: Stel een checklist samen en houd deze up-to-date terwijl je meer ervaring opdoet. Dit is belangrijk! De kan is klein dat je elk commando uit het hoofd kent en als je met netwerkproblemen te kampen hebt, kan je niet gaan Googlen... Wees systematisch en volg dezelfde stappen in de juiste volgorde. Wees grondig , en sla geen stappen over (bijvoorbeeld het controleren van de kabels), tenzij bewezen is dat alles op dat niveau werkt zoals verwacht. Werk in kleine stappen en controleer bij elke wijziging of deze het verwachte resultaat oplevert. Maak geen veronderstellingen . Controleer. Bewaar een reservekopie van originele configuratiebestanden en de laatste \"werkende\" versie. Valideer altijd de syntaxis van configuratiebestanden voordat je ze toepast. Controleer de (juiste) systeemlogbestanden . Leer jezelf aan hoe je effici\u00ebnt moet zoeken in de systeemlogs. Open een aparte terminal die de logs in realtime toont (bijvoorbeeld journalctl -f) Automatiseer je tests (met een Shell-script, BATS-testscript , Ansible-playbook, Serverspec, etc.) Foutmeldingen geven meestal een idee van waar je moet zoeken en kunnen een snelkoppeling zijn in het probleemoplossingsproces. Zoek naar de foutmelding in de logboeken of gegenereerd door clientsoftware en weet hoe je deze moet interpreteren. u En tenslotte: Stop met pingen naar www.google.com! Dit is geen goede test, want je hebt er niets aan als dit niet lukt. Er moeten teveel voorwaarden vervuld zijn eer dit commando kan slagen.","title":"Enkele algemene richtlijnen"},{"location":"troubleshooting/#fysieke-en-netwerktoegangslaag","text":"In deze fase controleren we de netwerkhardware, met name netwerkkabels en poorten. Staat de stroom aan? Is de netwerkkabel aangesloten? Ga in VirtualBox naar de VM-instellingen, Netwerk, selecteer de actieve interfaces, klik op \"Geavanceerd\" en zorg ervoor dat het selectievakje \"Kabel aangesloten\" is aangevinkt. Gebruik bij een fysieke UTP-kabel een kabeltester om te controleren of deze goed werkt Branden de LED's van de Ethernet-poort, zowel op de machine als op de switch? Zo niet, test dan de kabel Sommige schakelaars hebben een andere kleur voor b.v. FastEthernet (100 Mbps) en Gigabit Ethernet. Controleer of je de verwachte kleur ziet. Gebruik het commando ip-link UP: ok, de interface is aangesloten NO-CARRIER: geen signaal op deze interface Kabel is correct aangesloten: $ ip link 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: enp0s31f6: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000 link/ether 20:2f:b9:f1:cc:84 brd ff:ff:ff:ff:ff:ff Kabel is niet correct aangesloten: $ ip l 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: enp0s31f6: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc fq_codel state DOWN mode DEFAULT group default qlen 1000 link/ether 20:2f:b9:f1:cc:84 brd ff:ff:ff:ff:ff:ff","title":"Fysieke en netwerktoegangslaag"},{"location":"troubleshooting/#internetlaag","text":"De internetlaag is verantwoordelijk voor het routeren van netwerkverkeer tussen hosts op het netwerk. Normaal krijgt een apparaat dat aansluit op een lokaal netwerk automatisch instellingen toegekend van een DHCP-server. Servers hebben soms een vast IP-adres en daar moet je dan toch deze instellingen controleren. Werk altijd in deze volgorde: Controleer de lokale netwerkinstellingen op het apparaat Controleer routering binnen het lokaal netwerk Controleer routering naar het internet","title":"Internetlaag"},{"location":"troubleshooting/#lokale-netwerkinstellingen","text":"Om te kunnen communiceren, moet elke host drie instellingen correct hebben geconfigureerd: Aan de netwerkinterface moet een IP-adres zijn toegewezen Er moet een standaardgateway zijn ingesteld Er moet een DNS-server zijn ingesteld Het IP-adres kan automatisch (DHCP) of handmatig zijn ingesteld. Controleer dit in /etc/sysconfig/network-scripts/ifcfg-IFACE (met IFACE de naam van de netwerkinterface). Dit is een fragment uit een netwerkinterfaceconfiguratiebestand dat is geconfigureerd om DHCP te gebruiken: DEVICE=\"enp0s3\" ONBOOT=\"yes\" BOOTPROTO=\"dhcp\" Dingen om te controleren: DEVICE moet de interfacenaam zijn ONBOOT moet yes zijn, anders zal het systeem niet proberen de interface te activeren bij het opstarten of bij het herstarten van de netwerkinterfaces ( systemctl restart network ) BOOTPROTO moet zijn ingesteld op dhcp Als er een vast IP-adres is ingesteld, kan de configuratie er als volgt uit zien: DEVICE=enp0s8 ONBOOT=yes BOOTPROTO=none IPADDR=192.168.56.24 NETMASK=255.255.255.0 DEVICE en ONBOOT zijn ingesteld zoals in het vorige voorbeeld BOOTPROTO zou none moeten zijn IPADDR en NETMASK moeten gespecifieerd zijn","title":"Lokale netwerkinstellingen"},{"location":"troubleshooting/#ip-adres-controleren","text":"Gebruik ip address (of de korte versie ip a ) om de IP-adressen voor elke interface weer te geven. Je moet de verwachte waarde kennen! Indien je het exacte IP-adres kent moet je in ieder geval weten wat het netwerkbereik of netwerk-IP en netwerkmasker is van het LAN waarin de host zich bevindt. Veel thuisrouters hebben een IP-bereik van 192.168.0.0/24 of 192.168.1.0/24 Op een VirtualBox NAT-interface moet het IP-adres van de VM 10.0.2.15/24 zijn. Let hier op het netwerkasker! Normaal is dat /8 voor dit IP-adres! Op een VirtualBox host-only interface hangt het IP-adres van de VM af van hoe je dit netwerk hebt geconfigureerd. Het standaard host-only netwerk heeft IP-bereik 192.168.56.0/24, met een DHCP-server die adressen uitdeelt vanaf 192.168.56.101 t/m 192.168.56.254. Mogelijke problemen en oorzaken (in geval van automatische IP-toewijzing met DHCP): Geen IP: De DHCP-server is onbereikbaar De DHCP-server geeft geen IP aan deze host (bv. als gewerkt wordt met gereserveerde IP-adressen op basis van MAC-adres) Het IP-adres ziet eruit als 169.254.x.x Er kon geen DHCP-server worden bereikt en er werd een \"link-local\"-adres toegewezen (typisch voor Windows-systemen) Het IP-adres niet in het verwachte bereik Mogelijk heb je voordien per ongeluk een vast IP-adres ingesteld en ben je vergeten het opnieuw op DHCP in te stellen... Misschien is de DHCP-server verkeerd ingesteld Mogelijke problemen en oorzaken (in geval van handmatige IP-instelling): Het IP-adres ligt niet in het verwachte bereik Fout bij toewijzing van het IP-adres, controleer het configuratiebestand Correct IP-adres, maar je krijgt de foutboodschap \"network unreachable\" Controleer het netwerkmasker, dit moet identiek zijn voor alle hosts op het LAN!","title":"IP-adres controleren"},{"location":"troubleshooting/#default-gateway","text":"Gewoonlijk is een host via een switch verbonden met een LAN. Netwerkverkeer naar de buitenwereld gaat via een router, aangesloten op hetzelfde LAN. Elke host op het LAN zou deze router, de \"default gateway\", moeten kennen. Gebruik het commando ip route (of korte versie ip r ). Er zou een regel moeten zijn die begint met default via x.y.z.w . Mogelijke problemen en oorzaken (in geval van automatische IP-toewijzing met DHCP): Er is geen standaard gateway ingesteld er is hoogstwaarschijnlijk ook een probleem met het IP-adres van deze host, los dit eerst op Als je de DHCP-server beheert, is deze misschien slecht geconfigureerd? Onverwacht standaard gateway-adres Mogelijk heb je de standaardgateway eerder handmatig ingesteld en ben je vergeten deze opnieuw op DHCP in te stellen Als je de DHCP-server beheert, is deze misschien slecht geconfigureerd?","title":"Default Gateway"},{"location":"troubleshooting/#dns-server","text":"Om het Internet te kunnen gebruiken, heeft elke host toegang nodig tot een DNS-server om de IP-adressen die bij hostnamen (bv. www.hogent.be) horen te kunnen opzoeken. Bekijk het bestand /etc/resolv.conf . Het heeft meestal een header die vermeldt dat het automatisch is gegenereerd, en zou een of meer regels moeten hebben die beginnen met nameserver . $ cat /etc/resolv.conf # Generated by NetworkManager zoek hogent.be naamserver 193.190.173.1 naamserver 193.190.173.2 Voor elke hostnaam die je vanop deze machine wil bereiken, zal het systeem een query sturen naar \u00e9\u00e9n van de opgegeven nameservers om het IP-adres op te vragen. Op recente versies van enkele Linux-distributies (bv. Ubuntu, Fedora) zal je het volgende zien: $ cat /etc/resolv.conf # This file is managed by man:systemd-resolved(8). Do not edit. [...] nameserver 127.0.0.53 Dan is systemd-resolved ge\u00efnstalleerd. Die simuleert zelf het gedrag van een DNS-server die antwoordt op DNS-queries. systemd-resolved zal dan de vraag doorgeven aan een externe DNS-server. Welke dat is kan je opvragen met resolvectl : $ resolvectl Global Protocols: LLMNR=resolve -mDNS -DNSOverTLS DNSSEC=no/unsupported resolv.conf mode: stub Link 2 (enp0s31f6) Current Scopes: DNS LLMNR/IPv4 LLMNR/IPv6 Protocols: +DefaultRoute +LLMNR -mDNS -DNSOverTLS DNSSEC=no/unsupported Current DNS Server: 192.168.0.1 DNS Servers: 192.168.0.1 In dit voorbeeld is dat 192.168.0.1, wellicht een thuisrouter die ook dienst doet als DNS forwarder.","title":"DNS-server"},{"location":"troubleshooting/#controleer-routering-binnen-het-lan","text":"Als de hierboven opgesomde instellingen correct zijn, kan je controleren of andere hosts op het LAN bereikbaar zijn. Ping de standaard gateway: ping a.b.c.d Ping een andere bekende host op het LAN Als dit werkt kan je proberen een host buiten het LAN te pingen Houd er rekening mee dat ping (en andere hulpprogramma's voor het oplossen van netwerkproblemen zoals de traceroute -familie) niet altijd werken. Sommige systeembeheerders zullen ICMP-verkeer op routers blokkeren, waardoor de resultaten onbruikbaar worden. Een commando als ping www.google.com (voor sommigen het eerste commando dat ze proberen in geval van netwerkverbindingsproblemen) is niet erg geschikt, omdat het van te veel dingen tegelijk afhangt: de netwerkinstellingen van de host moeten correct zijn routering zou moeten werken DNS zou beschikbaar moeten zijn geen enkele router tussen deze host en het doel mag ICMP blokkeren enz. Een Windows-systeem kan ook ICMP-verkeer blokkeren (inclusief ping ). Zorg ervoor dat je de firewall-instellingen controleert en indien nodig dit type netwerkverkeer toestaat. De volgende PowerShell-oneliner doet precies dat: Get-NetFirewallRule -DisplayName \"*Echo Request*\" | Set-NetFirewallRule -enabled true","title":"Controleer routering binnen het LAN"},{"location":"troubleshooting/#controleer-beschikbaarheid-van-de-dns-service","text":"Het is niet omdat er een DNS-server geconfigureerd is in /etc/resolv.conf of via systemd-resolved dat deze ook beschikbaar is voor clients en antwoordt op requests. Je kan controleren of de DNS-service beschikbaar is met nslookup (dit commando ken je allicht van Windows), dig of getent ahosts . $ nslookup www.hogent.be Server: 127.0.0.53 Address: 127.0.0.53#53 Non-authoritative answer: www.hogent.be canonical name = hogent.be. Name: hogent.be Address: 193.190.173.132 In dit voorbeeld stuurt nslookup de query naar de DNS-server gespecifieerd in /etc/resolv.conf . Je kan ook een specifieke DNS-server ondervragen: $ nslookup www.hogent.be 9.9.9.9 Server: 9.9.9.9 Address: 9.9.9.9#53 Non-authoritative answer: www.hogent.be canonical name = hogent.be. Name: hogent.be Address: 193.190.173.132 Het commando dig is veel uitgebreider en hier kan je ook andere types DNS-queries uitvoeren (NS, MX, AXFR, enz.): $ dig www.hogent.be @9.9.9.9 +short hogent.be. 193.190.173.132 Hiermee vraag je het IP-adres van www.hogent.be aan DNS-server 9.9.9.9 en drukt het resultaat in een bondige vorm af. Als je +short weglaat krijg je meer informatie te zien. Zie het onderdeel BIND troubleshooting voor meer info. Op servers en systemen met een minimale installatie, is het commando nslookup of dig misschien niet ge\u00efnstalleerd. Als je met netwerkproblemen te kampen hebt, kan je het ook niet gauw installeren (en nieuwe software installeren op een productieserver is sowieso geen goed idee). In dat geval kan je gebruik maken van getent ahosts : $ getent ahosts www.hogent.be 193.190.173.132 STREAM hogent.be 193.190.173.132 DGRAM 193.190.173.132 RAW Het nadeel van dit commando is dat je er enkel de in /etc/resolv.conf gespecifieerde DNS-server kan ondervragen, maar dat is natuurlijk beter dan niets. Wanneer de DNS-server niet gespecifieerd is, of niet antwoordt op queries, kan je dezelfde zaken controleren als bij de default gateway.","title":"Controleer beschikbaarheid van de DNS service"},{"location":"troubleshooting/#routering-buiten-het-lan","text":"Als binnen het lokale netwerk routering en DNS in orde zijn, kan je proberen om te pingen naar een host buiten het LAN. Begin met een host die zich nog relatief kort bij bevindt, en eventueel op IP-adres in plaats van op hostnaam. Een andere nuttige test is: $ curl icanhazip.com Curl is een command-line tool om te interageren met een webserver. De website https://icanhazip.com was oorspronkelijk een hobbyproject van systeembeheerder Major Hayden en wordt nu onderhouden door Cloudflare . De website is heel eenvoudig en bevat zelfs geen HTML, maar toont enkel het publieke IP-adres van waar jij de pagina hebt opgevraagd. Op die manier controleer je ook of je Internettoegang hebt, of web-verkeer doorgelaten wordt en wat het publieke IP-adres is van het netwerk waar je je bevindt.","title":"Routering buiten het LAN"},{"location":"troubleshooting/#transportlaag","text":"In de transportlaag controleren we volgende zaken: Draait de service? Luistert de service op het juiste poortnummer? Is de firewall correct geconfigureerd? We geven hier het voorbeeld van een webserver, maar je kan dit toepassen op elke service.","title":"Transportlaag"},{"location":"troubleshooting/#draait-de-service","text":"Gebruik hiervoor het commando systemctl status . We verwachten ergens in de uitvoer \"active (running)\" te zien. $ systemctl status httpd \u25cf httpd.service - The Apache HTTP Server Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled) Active: inactive (dead) Docs: man:httpd.service(8) In dit geval is de (Apache) webserver uitgeschakeld. We zien hier ook dat de service \"disabled\" is, wat betekent dat deze niet wordt opgestart bij het booten. Dit kan je oplossen met sudo systemctl enable httpd . We starten de service nu op en controleren het resultaat: $ sudo systemctl start httpd [sudo] password for user: $ systemctl status httpd \u25cf httpd.service - The Apache HTTP Server Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled) Active: active (running) since Fri 2021-06-25 21:46:10 CEST; 2s ago Docs: man:httpd.service(8) Main PID: 932880 (httpd) Status: \"Started, listening on: port 80\" Tasks: 213 (limit: 18723) Memory: 23.3M CPU: 100ms CGroup: /system.slice/httpd.service \u251c\u2500932880 /usr/sbin/httpd -DFOREGROUND \u251c\u2500932881 /usr/sbin/httpd -DFOREGROUND \u251c\u2500932883 /usr/sbin/httpd -DFOREGROUND \u251c\u2500932884 /usr/sbin/httpd -DFOREGROUND \u2514\u2500932885 /usr/sbin/httpd -DFOREGROUND jun 25 21:46:09 nb1100380 systemd[1]: Starting The Apache HTTP Server... jun 25 21:46:09 nb1100380 httpd[932880]: AH00558: httpd: Could not reliably determine the server's fully qualified domain nam> jun 25 21:46:10 nb1100380 httpd[932880]: Server configured, listening on: port 80 jun 25 21:46:10 nb1100380 systemd[1]: Started The Apache HTTP Server. Nu is de Apache server wel actief.","title":"Draait de service?"},{"location":"troubleshooting/#juiste-poortnummers","text":"Gebruik het commando ss -tln of sudo ss -tlnp (Show Sockets) om te controleren welke TCP-services (optie -t ) op dit moment een open server-socket ( -l ) in gebruik hebben. Met de optie -n toon je de poortnummers in plaats van de service-naam (zoals gespecifieerd in /etc/services ). De optie -p toont welk proces er luistert op deze server-socket, maar daar heb je root-rechten voor nodig (vandaar de sudo ). Voor services die gebaseerd zijn op UDP geef je de optie -u in plaats van -t . $ ss -tln State Recv-Q Send-Q Local Address:Port Peer Address:Port Process LISTEN 0 4096 0.0.0.0:5355 0.0.0.0:* LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* LISTEN 0 128 0.0.0.0:22 0.0.0.0:* LISTEN 0 4096 [::]:5355 [::]:* LISTEN 0 511 *:80 *:* LISTEN 0 128 [::]:22 [::]:* Vooral de kolom Local Address:Port is nuttig. \"Local Address\" geeft aan op welke netwerkinterface de service aan het luisteren is: 127.0.0.1: enkel op de loopback-interface 0.0.0.0 of *: op alle interfaces [::]: op alle interfaces (IPv6) Als er een specifiek IP-adres opgegeven wordt, dan luistert de service enkel op de netwerkinterface met dat IP-adres Verder moet je weten op welke poort je verwacht dat de service aan het luisteren is. Voor een webserver is dat typisch poort 80 (HTTP) en 443 (HTTPS). Poort 22 wordt normaal gebruikt door de Secure Shell daemon ( sshd ) en poort 53 door een DNS-server (in dit geval systemd-resolved , die ook poort 5353 gebruikt). Om zeker te zijn dat dit klopt, vragen we best ook de processen op: $ sudo ss -tlnp State Recv-Q Send-Q Local Address:Port Peer Address:Port Process LISTEN 0 4096 0.0.0.0:5355 0.0.0.0:* users:((\"systemd-resolve\",pid=704,fd=12)) LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* users:((\"systemd-resolve\",pid=704,fd=17)) LISTEN 0 128 0.0.0.0:22 0.0.0.0:* users:((\"sshd\",pid=760464,fd=5)) LISTEN 0 4096 [::]:5355 [::]:* users:((\"systemd-resolve\",pid=704,fd=14)) LISTEN 0 511 *:80 *:* users:((\"httpd\",pid=932885,fd=4),(\"httpd\",pid=932884,fd=4),(\"httpd\",pid=932883,fd=4),(\"httpd\",pid=932880,fd=4)) LISTEN 0 128 [::]:22 [::]:* users:((\"sshd\",pid=760464,fd=7)) Als de service opgestart is, maar niet op het juiste poortnummer luistert, dan zal die ook niet beschikbaar zijn voor clients. Meestal moet je het poortnummer specifi\u00ebren in het configuratiebestand voor die service. Controleer dit, herstart de service na de nodige aanpassingen en controleer opnieuw met sudo ss -tlnp .","title":"Juiste poortnummers"},{"location":"troubleshooting/#firewall-instellingen","text":"Laat de firewall netwerkverkeer door naar de service? Controleer dit met firewall-ctl : $ sudo firewall-cmd --list-all public (default, active) interfaces: enp0s3 enp0s8 sources: services: dhcpv6-client mdns samba-client ssh http https ports: masquerade: no forward-ports: icmp-blocks: rich rules: In dit geval zijn de services http en https bereikbaar. De services dhcpv6-client mdns samba-client staan op Fedora/RedHat altijd aan. Voor een server is ssh ook belangrijk en dit moet dus ook meestal aan staan. Controleer steeds of: De netwerkinterface waarop de service luistert wordt vermeld in de lijn die begint met interfaces: De servicenaam wordt weergegeven. De waarde moet er een zijn die wordt vermeld door firewall-cmd --get-services . Merk op dat de servicenaam voor firewalld niet noodzakelijk gelijk is aan de systemd servicenaam. Bijv. de BIND service heet named.service , terwijl er in de firewall-instellingen naar wordt verwezen met dns . Als de servicenaam niet voorkomt in de uitvoer van firewalld --get-services , moeten de poortnummers en transportprotocol die door de service worden gebruikt worden vermeld (bijvoorbeeld bij gebruik van een niet-standaard poort of een service die niet bekend is onder 'firewalld'). Voeg zo nodig de service toe aan de firewall-configuratie en herstart: $ sudo firewall-cmd --add-service=http --permanent success $ sudo firewall-cmd --add-service=https --permanent success $ sudo firewall-cmd --reload success Vergeet hier de optie --permanent niet! Als je die weglaat, wordt de wijziging onmiddellijk doorgevoerd (wat op het eerste zicht is wat je wilt), maar na rebooten van het systeem of herstarten van de firewalld.service , zal deze tijdelijke wijziging ongedaan gemaakt worden en heb je terug de foute instellingen! Als je een poortnummer moet specifi\u00ebren gebruik je volgende notatie: $ sudo firewall-cmd --add-port=9000/tcp --permanent success $ sudo firewall-cmd --reload success Controleer na een wijziging altijd of de firewall-regels nu correct zijn! TODO: kadertekstje over verwarring bij de uitspraak \"open poorten\".","title":"Firewall-instellingen"},{"location":"troubleshooting/#applicatielaag","text":"Specifieke zaken waar je moet op letten in deze laag hangen voor een groot stuk af van de service die je aan het configureren/troubleshooten bent. Apache, nginx, BIND, Vsftpd, Postfix, enz. hebben allemaal een eigen structuur en configuratie met onderling grote verschillen. Je moet de service in kwestie dus goed leren kennen! Er zijn echter wel enkele algemene zaken die je in elke situatie kan controleren: De systeemlogs kunnen foutboodschappen bevatten die een indicatie zijn voor de oorzaak van het probleem. De meeste services hebben een tool waarmee je de syntax van het configuratiebestand kan controleren. De service moet beschikbaar zijn voor clients en antwoorden op requests/queries.","title":"Applicatielaag"},{"location":"troubleshooting/#systeemlogbestanden","text":"Controleer systeemlogs met journalctl of door het logbestand voor de service op te zoeken in /var/log . Alle systeemlogs die beheerd worden door systemd-journald kan je met dat eerste commando opvragen. Sommige applicaties worden niet beheerd of herkend door systemd-journald en die houden hun logs bij als een tekstbestand (in de directory /var/log ). Het is nuttig om tijdens het hele troubleshooting-proces een aparte terminal te openen en daarin de relevante logs te openen. In de voorbeelden hieronder zorgt de optie -f (kort voor --follow ) er voor dat het commando wacht op nieuwe log-events en die meteen toont wanneer die zich voordoen. Op die manier kan je meteen het effect zien van commando's, configuratiewijzigingen of andere handelingen die je op het systeem uitvoert. sudo journalctl -f : toont alle systeemlog-events die door systemd-journald ontvangen worden. sudo journalctl -f -u httpd.service : zal enkel de logs van de Apache server tonen. sudo tail -f /var/log/httpd/error_log : toont de inhoud van het tekstbestand error_log , waar soms foutboodschappen in terecht komen die je niet ziet met journalctl , zoals bijvoorbeeld de foutboodschappen van een PHP-applicatie.","title":"Systeemlogbestanden"},{"location":"troubleshooting/#configuratiebestanden","text":"Controleer het configuratiebestand dat zich ergens in de directory /etc/ moet bevinden. Voor Apache is dat bv. /etc/httpd/httpd.conf . Maak eerst een backup van de huidige toestand van het configuratiebestand voordat je wijzigingen aanbrengt! Valideer de syntaxis van het configuratiebestand, als dit voorzien is door de service. Apache: apachectl configtest BIND: named-checkconf en named-checkzone Samba: testparm Vsftpd: vsftpd -olisten=NO enz. Verbeter waar nodig fouten in het configuratiebestand en herstart daarna de service, bv: sudo systemctl restart httpd.service . Controleer in de logs of er nieuwe of andere foutboodschappen verschijnen Controleer of de service nu wel draait (zie Transportlaag)","title":"Configuratiebestanden"},{"location":"troubleshooting/#beschikbaarheid-voor-clients","text":"Als we alle voorgaande stappen doorlopen hebben, en eventuele fouten weggewerkt hebben, dan mogen we op dit punt verwachten dat de service nu correct werkt en beschikbaar is voor clients. We kunnen dit soms op de server zelf controleren (via de loopback-interface), maar het is belangrijk om dit over het netwerk te doen. Zo komen soms nog onverwachte problemen naar boven. Netwerkverkeer op de loopback-interface wordt bijvoorbeeld nooit tegengehouden door de firewall, terwijl dat via fysieke interfaces wel kan gebeuren. Naast het gebruiken van de normale client-software om de service aan te spreken (bv. een webbrowser), zijn er nog enkele andere tools die van pas kunnen komen bij het onderzoeken van de interactie tussen clients en de service. Je kan een portscan uitvoeren met nmap om te controleren of de serverpoort bereikbaar is, bv. sudo nmap -sS -p 80,443 192.168.56.24 : voer een TCP SYN scan uit op poorten 80 en 443 Gebruik een commandline-tool of test-commando om de service te ondervragen. Dit soort tools geven vaak betere foutboodschappen om de oorzaak van problemen te achterhalen dan de \"normale\" client-software voor gewone gebruikers. Voorbeelden: Webservice: wget http://192.168.56.24/ , curl https://192.168.56.24/ Samba: nmblookup server , smbclient -Uuser%password //server/share FTP: ftp server of curl --user user:password ftp://server/path/to/file DNS: dig DHCP: nmap heeft een script waarmee je dit kan testen Soms is het nuttig om een packet sniffer zoals Tcpdump of Wireshark te gebruiken om de netwerktrafiek tussen clients en de service te bestuderen. Tegenwoordig is veel netwerkverkeer ge\u00ebncrypteerd, dus de kans bestaat dat dit niet veel nuttige informatie oplevert.","title":"Beschikbaarheid voor clients"},{"location":"troubleshooting/#troubleshooting-tips-voor-specifieke-services-en-situaties","text":"","title":"Troubleshooting tips voor specifieke services en situaties"},{"location":"troubleshooting/#bind","text":"TODO","title":"BIND"},{"location":"troubleshooting/#virtualbox-netwerkinstellingen","text":"TODO","title":"VirtualBox netwerkinstellingen"},{"location":"troubleshooting/#tldr-checklist","text":"Hieronder vind je een overzicht van de belangrijkste zaken die je moet controleren, en de commando's die je daarvoor kan gebruiken. Fysieke en netwerktoegangslaag Controleer of de kabels goed aangesloten zijn Controleer of de kabel nog goed werkt Controleer de LEDs van de switchpoort Is de machine verbonden met de juiste switch? Krijgt de machine een signaal op de kabel? ip link Internetlaag Controleer eerst lokale netwerkinstellingen IP adres ( ip a ) default gateway ( ip r ) DNS ( cat /etc/resolv.conf of resolvectl ) Routering binnen het LAN ping naar de gateway en naar andere gekende hosts op het LAN controleer beschikbaarheid van DNS ( nslookup , dig , getent ahosts ) Routering naar het internet ping een gekende host buiten het LAN (let er op dat sommige routers ICMP-verkeer blokkeren en pingen naar buiten in dit geval niet werkt) Transportlaag Is de service opgestart? systemctl status Luistert de service op de juiste netwerkinterface en poortnummer? sudo ss -tlnp Laat de firewall netwerkverkeer naar de service door? sudo firewall-cmd --list-all Applicatielaag Controleer systeemlogs: sudo journalctl -f -u SERVICE , tail -f /var/log/LOG_FILE Gebruik command-line tools om de service aan te spreken ( curl , smbclient , dig , ...) Controleer of de service beschikbaar is over het netwerk ( nmap , wireshark , ...)","title":"TL;DR checklist"}]}